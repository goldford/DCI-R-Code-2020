
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #last updated Feb 2022 - G Oldford
> ################################################################
> # CREATE GRAPH OBJECT for DCI w/ Distance Decay
> # edge weights are used for distance calculations
> # edge data / attributes used for habitat quantity calculations
> # #https://www.rdocumentation.org/packages/graph/versions/1.50.0/topics/graphAM-class
> create_graph_dd_2020 <- function(adj_matrix_edgelengths=0.0,FIPEX_table=NULL){
+ 
+     # Create graph object
+     # 2020 - different way to call the graphAM function 
+     # vs pre-2020
+     g_dd <- graphAM(adjMat=adj_matrix_edgelengths,  edgemode="directed", values=list(weight=1))
+ 
+     # associate passabilities with nodes using NodeData slot
+     # e.g. nodeData(g,n=c("b", "c"), attr ="color") <- "red"
+     nodeDataDefaults(g_dd, attr ="pass") <- 1.0
+     nodeData(g_dd,n=as.character(FIPEX_table$NodeEID), attr="pass") <- as.double(FIPEX_table$BarrierPerm)
+     #nd <- nodes(g_dd)
+ 
+     nodeDataDefaults(g_dd, attr ="nodelabel") <- "none"
+     nodeData(g_dd,n=as.character(FIPEX_table$NodeEID), attr="nodelabel") <- as.character(FIPEX_table$NodeLabel)
+     nodeData(g_dd,n="sink", attr="nodelabel") <- "sink"
+     #nd <- nodes(g_dd)
+ 
+     nodeDataDefaults(g_dd, attr ="downnodelabel") <- "none"
+     nodeData(g_dd,n=as.character(FIPEX_table$NodeEID), attr="downnodelabel") <- as.character(FIPEX_table$DownstreamNodeLabel)
+     #nd <- nodes(g_dd)
+ 
+     nodeDataDefaults(g_dd, attr ="natural") <- "none"
+     nodeData(g_dd,n=as.character(FIPEX_table$NodeEID), attr="natural") <- FIPEX_table$NaturalTF
+     nodeData(g_dd,n="sink", attr="natural") <- FALSE
+     #nd <- nodes(g_dd)
+ 
+     # optionally can give edges attributes
+     #edgeDataDefaults(g_dd, attr="name")<-"noname"
+     #edgeData(self, from, to, attr)
+     #edgeData(self, from, to, attr) <- value
+     edgeDataDefaults(g_dd, attr="HabitatQuan")<-0.0
+     edgeData(g_dd,from=as.character(FIPEX_table$NodeEID), 
+          to=as.character(FIPEX_table$DownstreamEID), 
+          attr="HabitatQuan")<-as.double(FIPEX_table$HabQuantity)
+     # reverse - attr associated with each direction along one edge
+     edgeData(g_dd,from=as.character(FIPEX_table$DownstreamEID), 
+          to=as.character(FIPEX_table$NodeEID), 
+          attr="HabitatQuan")<-as.double(FIPEX_table$HabQuantity)
+ 
+ 
+     # give edges an easy-to-access name insensitive to direction
+     # this is done to quickly identify duplicates later
+     # there may be alternatives such as accessing edgeNames but I suspect
+     # they are slower than this
+     edgeDataDefaults(g_dd, attr="EdgeNameGO")<-"init"
+     edgeData(g_dd,from=as.character(FIPEX_table$NodeEID), 
+          to=as.character(FIPEX_table$DownstreamEID), 
+          attr="EdgeNameGO")<-paste(as.character(FIPEX_table$DownstreamEID),
+                                    as.character(FIPEX_table$NodeEID),
+                                    sep="-")
+     # reverse - attr associated with each direction along one edge
+     edgeData(g_dd,from=as.character(FIPEX_table$DownstreamEID), 
+          to=as.character(FIPEX_table$NodeEID), 
+          attr="EdgeNameGO")<-paste(as.character(FIPEX_table$DownstreamEID),
+                                    as.character(FIPEX_table$NodeEID),
+                                    sep="-")
+     return(g_dd)
+ }
> 
> ################################################################################
> # get all distances and paths (from penult) to all nodes from Sink / all nodes
> # https://www.rdocumentation.org/packages/RBGL/versions/1.48.1/topics/dijkstra.sp
> # note it must be node-node - no edge-edge possible
> # note using this function repeatedly during DCIp is inefficient 
> # !!! (should use BFS w/ LCA i.e., custom algorithm) !!!
> #   (cannot edit the source for Djikstra.sp because it's actually an 
> #   interface to C++ 'Boost'library for graphs - can't get edge and node attributes 
> #   during net traversal)
> 
> get_paths_distances <- function(g=NULL,fromnode="sink"){
+     dijkstra.sp(g,fromnode,eW=unlist(edgeWeights(g)))
+     
+     # TO DO: ALTERNATIVES FOR BENCHMARKING
+ }
> 
> ##############################################################################
> ##### SUMMARY TABLE 2020 #####
> 
> # replaces similar pre-2020 function to create a table for each edge-edge pair
> # Includes options for alternative data management for benchmarking
> # (code could be trimmed).
> # this function could be sped up with custom algorithm that can find path 
> # while also grabbing attribute data (BFS w/ LCA). 
> # - G Oldford, 2020
> 
> # gets cumulative passability each pair using path info
> # and get other attributes
> 
> # pseudocode:
> # for each 'from node' (e.g., sink in DCId, and all nodes in DCIp)
> #  get paths between node and all other node
> #
> #  for each 'to node' in 'all paths' results
> #   get the first edge len and hab traversed from node to sink
> #
> #   store length and hab of the edge between 'to node' and first node encountered
> #   in path back to 'from node' (i.e., the 'to edge')
> 
> #   do while next node name <> "from node"
> #     pass = nodeData(g_dd, nextnode, "pass")
> #     cumulativepass =  cumulativepass * pass
> #     nextnode = the next node in path towards 'from node'
> #     if last edge traversed on the way to 'from node'
> #       store the length and habitat of this edge which is the 'from edge'
> #     if there is a maxdistance set for distance decay, 
> #       add a TRUE/FALSE column to indicate this
> #   
> #   
> #   add various other attributes to master table (attr's from g object)
> 
> # requires library(data.table)
> # data.table vs other options likely to speed things up for large networks
> #https://rstudio-pubs-static.s3.amazonaws.com/406521_7fc7b6c1dc374e9b8860e15a699d8bb0.html
> #https://www.rdocumentation.org/packages/data.table/versions/1.13.0/topics/rbindlist
> 
> get_summary_tab_2020 <- function(option="dt-lists",
+                                  naturalonly=FALSE,
+                                  g = NULL,
+                                  DCIp=FALSE,
+                                  bDistanceLim=FALSE,
+                                  dMaxDist=0.0){
+     
+     # funciton params:
+     # option - for benchmarking speed of appending to table
+     # naturalonly - will calculate pass-weighted path distances
+     #  while ignoring non-natural barriers
+     # g - the graph object (rbgl GraphAM in BioconductR)
+     # DCIp - TRUE / FALSE will trigger loop that finds path
+     #       between all nodes, node just sink
+     # initialize empty data object in different ways
+     
+     # for different options and benchmarking:
+     DT2 = data.table(FromNode="init",
+                  ToNode="init",
+                  FromNodeLabel="init",
+                  ToNodeLabel="init",
+                  CumulativePass=0.0,
+                  FromEdgeLen=0.0,
+                  ToEdgeLen=0.0,
+                  TotalDist=0.0,
+                  DistMinusStartEndLen=0.0,
+                  DistMinusSEExceedsThreshold=FALSE,
+                  FromEdgeHab=0.0,
+                  ToEdgeHab=0.0,
+                  ToEdgeName="init",
+                  FromEdgeName="init",
+                  ToFromEdgeNameCombo="init")
+     
+     DF2 = data.frame(FromNode="init",
+                  ToNode="init",
+                  FromNodeLabel="init",
+                  ToNodeLabel="init",
+                  CumulativePass=0.0,
+                  FromEdgeLen=0.0,
+                  ToEdgeLen=0.0,
+                  TotalDist=0.0,
+                  DistMinusStartEndLen=0.0,
+                  DistMinusSEExceedsThreshold=FALSE,
+                  FromEdgeHab=0.0,
+                  ToEdgeHab=0.0,
+                  ToEdgeName="init",
+                  FromEdgeName="init",
+                  ToFromEdgeNameCombo="init", stringsAsFactors=F)
+     
+     # lists in R must have size pre-allocated 
+     # size of our table is almost n^2 - n*(n-1) 
+     # (less than n^2 since not getting distance from node to itself)
+     if(DCIp==FALSE){
+         outlist <- vector("list", length(numNodes(g_dd)))
+     }else{
+         outlist <- vector("list", length(numNodes(g_dd)*(numNodes(g_dd)-1)))   
+     }
+     
+     outlist[[numNodes(g_dd)]] <- list(FromNode="init",
+                  ToNode="init",
+                  FromNodeLabel="init",
+                  ToNodeLabel="init",
+                  CumulativePass=0.0,
+                  FromEdgeLen=0.0,
+                  ToEdgeLen=0.0,
+                  TotalDist=0.0,
+                  DistMinusStartEndLen=0.0,
+                  DistMinusSEExceedsThreshold=FALSE,
+                  FromEdgeHab=0.0,
+                  ToEdgeHab=0.0,
+                  FromEdgeName="init",
+                  ToEdgeName="init",
+                  ToFromEdgeNameCombo="init")
+ 
+     # from = sink / start node
+     # to = other nodes
+     if(DCIp==FALSE){
+         fromnodecount=1
+     }else{
+         fromnodecount=numNodes(g_dd)
+     }
+     
+     bDistMinusSEExceedsThreshold = FALSE
+     count = 0
+     for (j in 1:fromnodecount){
+         
+         if(DCIp==FALSE){
+             fromnode_name = "sink"
+             fromnode_label = "sink" 
+         }else{
+             fromnode_name = nodes(g_dd)[j]
+              if (fromnode_name=="sink"){
+                 fromnode_label = "sink"
+             }else{
+                 fromnode_label = nodeData(g_dd, fromnode_name, "nodelabel")[[1]]  
+             }
+         }
+         
+         ###########################################################
+         #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+         # get path & distances between 'fromnode' and all other nodes
+         paths_distances <- get_paths_distances(g,fromnode_name)
+         # this can be time consuming
+         
+     for (k in 1:length(paths_distances$penult)) {
+         
+         tonode <- paths_distances$penult[k]     
+         tonode_name = names(tonode)
+         tonode_name <- tonode_name[[1]]
+         tonode_label = nodeData(g_dd, tonode_name, "nodelabel")[[1]]
+     
+         if (tonode_name == fromnode_name){
+             # not interested in distance from one node to itself
+             next
+         }
+         count = count+1
+         # initialize
+         cumulativepass = 1.0
+         pass = 1.0 # watch not to take pass from to/from end nodes since traversal starts at edge
+         totaldistance = paths_distances$distances[tonode_name]
+         totaldistance <- totaldistance[[1]]     
+         
+         # get length of edge 
+         nextnode = paths_distances$penult[tonode]
+         nextnode_name = names(nextnode)
+         lastnode_name = tonode_name
+     
+         # get the last edge length traversed on the way to 'to node'
+         # alternatively could grab the weight for this edge instead of subtraction
+         toedgelen = totaldistance - paths_distances$distances[nextnode_name]
+         toedgelen <- toedgelen[[1]]
+         toedgedata =edgeData(g_dd, tonode_name,nextnode_name)
+         toedgehab = toedgedata[[1]]$HabitatQuan
+         toedgename = toedgedata[[1]]$EdgeNameGO
+         
+         exitvar = "go"
+         while (exitvar != "stop"){
+         
+             if(nextnode_name != fromnode_name){
+                 pass = nodeData(g_dd, nextnode_name, "pass")
+                 if(naturalonly==FALSE){
+                     cumulativepass = cumulativepass * pass[[1]]
+                 }else{
+                     natural = nodeData(g_dd,nextnode_name,"natural")
+                     if(natural[[1]]==TRUE){
+                         cumulativepass = cumulativepass * pass[[1]]
+                     }
+                 }
+             }else{
+                 fromedgelen = paths_distances$distances[lastnode_name]
+                 fromedgelen <- fromedgelen[[1]]
+                 fromedgedata = edgeData(g_dd, lastnode_name,fromnode_name)
+                 fromedgehab = fromedgedata[[1]]$HabitatQuan
+                 fromedgename = fromedgedata[[1]]$EdgeNameGO
+                 
+                 exitvar="stop"
+             }
+             
+             lastnode_name = nextnode_name
+             nextnode = paths_distances$penult[nextnode]
+             nextnode_name = names(nextnode)
+         }
+         
+        distminusstartendlen = totaldistance - toedgelen - fromedgelen
+        # less than zero distance indicates it's an edge-to-itself distance
+        # correct for this
+        if (distminusstartendlen<0){
+           distminusstartendlen = 0 
+        }
+         
+        tofromedgename_combo = paste(toedgename,fromedgename,sep="|")
+        
+        if (bDistanceLim == TRUE){
+            if (distminusstartendlen > dMaxDist){
+                bDistMinusSEExceedsThreshold=TRUE
+            }else{
+                bDistMinusSEExceedsThreshold=FALSE
+            }
+        }else{
+            bDistMinusSEExceedsThreshold=FALSE
+        }
+        
+         if (option=="dt"){
+             #print(cumulativepass)
+             #https://www.rdocumentation.org/packages/data.table/versions/1.13.0/topics/rbindlist
+             DT1 = data.table(FromNode=fromnode_name,
+                      ToNode=tonode_name,
+                      FromNodeLabel=fromnode_label,
+                      ToNodeLabel=tonode_label,
+                      CumulativePass=cumulativepass, 
+                      FromEdgeLen=fromedgelen,
+                      ToEdgeLen=toedgelen,
+                      TotalDist=totaldistance,
+                      DistMinusStartEndLen=distminusstartendlen,
+                      DistMinusSEExceedsThreshold = as.logical(bDistMinusSEExceedsThreshold),
+                      FromEdgeHabLen=fromedgehablen,
+                      ToEdgeHab=toedgehab,
+                      FromEdgeHab=fromedgehab,
+                      FromEdgeName=fromedgename,
+                      ToEdgeName=toedgename,
+                      ToFromEdgeNameCombo=tofromedgename_combo)
+             l = list(DT1,DT2)
+             
+             DT2 = rbindlist(l, use.names=TRUE)
+         }else if(option=="dt-lists"){
+             # append lists to list rather than work yet with tables
+             DL1 = list(FromNode=fromnode_name,
+                      ToNode=tonode_name,
+                      FromNodeLabel=fromnode_label,
+                      ToNodeLabel=tonode_label,
+                      CumulativePass=cumulativepass, 
+                      FromEdgeLen=fromedgelen,
+                      ToEdgeLen=toedgelen,
+                      TotalDist=totaldistance,
+                      DistMinusStartEndLen=distminusstartendlen,
+                      DistMinusSEExceedsThreshold = as.logical(bDistMinusSEExceedsThreshold),
+                      FromEdgeHab=fromedgehab,
+                      ToEdgeHab=toedgehab,
+                      FromEdgeName=fromedgename,
+                      ToEdgeName=toedgename,
+                      ToFromEdgeNameCombo=tofromedgename_combo)
+             #print("Length DL1: ")
+             #print(length(DL1))
+             outlist[[count]] <- (DL1)
+             
+         }else if(option=="df"){
+             DF1 = data.frame(FromNode=fromnode_name,
+                      ToNode=tonode_name,
+                      FromNodeLabel=fromnode_label,
+                      ToNodeLabel=tonode_label,
+                      CumulativePass=cumulativepass, 
+                      FromEdgeLen=fromedgelen,
+                      ToEdgeLen=toedgelen,
+                      TotalDist=totaldistance,
+                      DistMinusStartEndLen=distminusstartendlen,
+                      DistMinusSEExceedsThreshold = as.logical(bDistMinusSEExceedsThreshold),
+                      FromEdgeHab=fromedgehab,
+                      ToEdgeHab=toedgehab,
+                      FromEdgeName=fromedgename,
+                      ToEdgeName=toedgename,
+                      ToFromEdgeNameCombo=tofromedgename_combo)
+             #print(fromedgehabarea)
+             #print(DF1)
+             DF2 <- rbind(DF2, DF1)
+           }else if(option=="df-lists"){
+             DL1 = list(FromNode=as.character(fromnode_name),
+                      ToNode=as.character(tonode_name),
+                      FromNodeLabel=as.character(fromnode_label),
+                      ToNodeLabel=as.character(tonode_label),
+                      CumulativePass=as.numeric(cumulativepass), 
+                      FromEdgeLen=as.numeric(fromedgelen),
+                      ToEdgeLen=as.numeric(toedgelen),
+                      TotalDist=as.numeric(totaldistance),
+                      DistMinusStartEndLen=as.numeric(distminusstartendlen),
+                      DistMinusSEExceedsThreshold = as.logical(bDistMinusSEExceedsThreshold),
+                      FromEdgeHab=fromedgehab,
+                      ToEdgeHab=toedgehab,
+                      FromEdgeName=as.character(fromedgename),
+                      ToEdgeName=as.character(toedgename),
+                      ToFromEdgeNameCombo=as.character(tofromedgename_combo))
+             outlist[[count]] <- (DL1)
+         }else if(option=="dplyr"){
+              DL1 = list(FromNode=as.character(fromnode_name),
+                      ToNode=as.character(tonode_name),
+                      FromNodeLabel=as.character(fromnode_label),
+                      ToNodeLabel=as.character(tonode_label),
+                      CumulativePass=as.numeric(cumulativepass), 
+                      FromEdgeLen=as.numeric(fromedgelen),
+                      ToEdgeLen=as.numeric(toedgelen),
+                      TotalDist=as.numeric(totaldistance),
+                      DistMinusStartEndLen=as.numeric(distminusstartendlen),
+                      DistMinusSEExceedsThreshold = as.logical(bDistMinusSEExceedsThreshold),
+                      FromEdgeHab=as.numeric(fromedgehab),
+                      ToEdgeHab=as.numeric(toedgehab),
+                      FromEdgeName=fromedgename,
+                      ToEdgeName=toedgename,
+                      ToFromEdgeNameCombo=tofromedgename_combo)
+             #print(row1)
+             DF2 <- bind_rows(DF2,DL1)
+         }
+     } #k
+     } #j
+         
+     if(option=="dt"){
+         sum_tab <- DT2
+     }else if(option=="dt-lists"){
+         DT2 <- data.table(rbindlist(outlist))
+         
+         sum_tab <- DT2
+     }else if(option=="df"){
+         #DF2 <- DF2[!duplicated(DF2$ToFromEdgeNameCombo), ]
+         sum_tab <- DF2
+     }else if(option=="df-lists"){
+         DF2 <- data.frame(do.call(rbind, outlist))
+         #DF2 <- DF2[!duplicated(DF2$ToFromEdgeNameCombo), ]
+         sum_tab <- DF2
+     }else if(option=="dplyr"){
+         sum_tab <- DF2
+     }
+         
+     # if a distance limit, eliminate rows
+     if(bDistanceLim == TRUE){
+         return(sum_tab[DistMinusSEExceedsThreshold==FALSE])
+     }else{
+         return(sum_tab) 
+     } 
+           
+ }
> 
> #######################################################
> ###### Calculate DCI #####
> #dci_calc_2020_dd <- function(){}
> # warning: the sum_tab_2020 must be a data.table
> #          only some data frames work ('dplyr' is ok not
> #          the 'df-lists' option)
> 
> 
> ######### (1) DCId - calc_DCId #########
> calc_DCId_2020 <- function(sum_tab_2020=NULL,
+                            totalhabitat=0.0,
+                            FromNode="sink",
+                            bDistanceLim=FALSE){
+     
+     # filter table
+     DCId_data<-subset(sum_tab_2020,FromNode=="sink")
+     
+     # Credit to Chris Edge Code for avoiding loops in R here: 
+     if(bDistanceLim==FALSE){
+         DCId_data$temp <- DCId_data$CumulativePass * (DCId_data$ToEdgeHab/totalhabitat)
+     }else{
+         DCId_data$temp <- DCId_data$CumulativePass * (DCId_data$ToEdgeHabMaxAccessible/DCId_data$MaxTotalAccessHabFromEdge)
+     }
+     DCId <- sum(DCId_data$temp)
+     return(round(DCId*100,2))
+ } # DCId
> 
> ######### (2) DCIp - calc_DCIp #########
> # Credit to C Edge for shorter code
> calc_DCIp_2020 <- function(sum_tab_2020=NULL,
+                            totalhabitat=0.0,
+                            option="unique",
+                            bDistanceLim=FALSE){
+     
+     # 'option' = unique / distinct for benchmarking speeds
+     # unique = data.table / base r
+     # distinct = dplyr
+     # to do: sometimes sum_tab may be a data.table sometimes data.frame
+     if(option=="unique"){
+         sum_tab_2020 <- unique(sum_tab_2020, by = "ToFromEdgeNameCombo")
+     }else{
+         sum_tab_2020 <- distinct(sum_tab_2020, ToFromEdgeNameCombo, .keep_all = TRUE)
+     }
+ 
+     DCIp <- 0
+     if(bDistanceLim==FALSE){
+         for (i in 1:nrow(sum_tab_2020)) {
+             DCIp <- DCIp + (sum_tab_2020$CumulativePass[i] * (sum_tab_2020$FromEdgeHab[i]/totalhabitat)) * (sum_tab_2020$ToEdgeHab[i]/totalhabitat)
+         }
+     }else{
+         for (i in 1:nrow(sum_tab_2020)) {
+             DCIp <- DCIp + (sum_tab_2020$CumulativePass[i] * (sum_tab_2020$FromEdgeHab[i]/totalhabitat))* (sum_tab_2020$ToEdgeHabMaxAccessible[i]/sum_tab_2020$MaxTotalAccessHabFromEdge[i]) 
+         }
+     }
+     return(round(DCIp*100,2))
+ }
> 
> ######### (3) DCIs - calc_DCIs #########
> # can be added into (2) as option see below
> calc_DCIs_2020 <- function (sum_tab_2020=NULL,
+                             totalhabitat=0.0,
+                             option="dt",
+                             bDistanceLim=FALSE){
+     
+     # option: "dt","dplyr","old"
+     # alternative methods for benchmarking
+     if(option=="dt"){
+         
+         DCIs <- sum_tab_2020
+         # remove duplicates
+         DCIs <- unique(sum_tab_2020, by = "ToFromEdgeNameCombo")
+         
+         if(bDistanceLim==FALSE){
+             # select only a required columns
+             cols = c("FromEdgeName","ToEdgeHab","CumulativePass")
+             DCIs <- DCIs[,..cols]
+             # first step to DCIs
+             DCIs[, DCIs_i := round(ToEdgeHab/totalhabitat * CumulativePass * 100,2)]
+         }else{
+             # select only a required columns
+             cols = c("FromEdgeName","ToEdgeHabMaxAccessible","CumulativePass","MaxTotalAccessHabFromEdge")
+             DCIs <- DCIs[,..cols]
+             # first step to DCIs
+             DCIs[, DCIs_i := round(ToEdgeHabMaxAccessible/MaxTotalAccessHabFromEdge * CumulativePass * 100,2)]
+         }
+         
+         cols = c("FromEdgeName","DCIs_i")
+         DCIs <- DCIs[,..cols]
+         # second step to DCIs
+         DCIs <- DCIs[, lapply(.SD,sum), by=.(FromEdgeName)]
+         
+     }else if(option=="dplyr"){
+         
+         if(bDistanceLim==FALSE){
+             DCIs <- sum_tab_2020 %>%
+             distinct(ToFromEdgeNameCombo, .keep_all = TRUE) %>%
+             mutate(DCIs_i = CumulativePass * ToEdgeHab/totalhabitat * 100) %>%
+             select(DCIs_i,FromEdgeName) %>%
+             group_by(FromEdgeName) %>%
+             summarise(DCIs = sum(DCIs_i))
+         }else{
+             DCIs <- sum_tab_2020 %>%
+             distinct(ToFromEdgeNameCombo, .keep_all = TRUE) %>%
+             mutate(DCIs_i = CumulativePass * ToEdgeHabMaxAccessible/MaxTotalAccessHabFromEdge)*100 %>%
+             select(DCIs_i,FromEdgeName) %>%
+             group_by(FromEdgeName) %>%
+             summarise(DCIs = sum(DCIs_i))
+         }
+         
+         
+     }else if(option=="old"){
+         sum_tab_2020 <- unique(sum_tab_2020, by = "ToFromEdgeNameCombo")
+         sections<-as.vector(unique(sum_tab_2020$FromEdgeName))
+         # store the all section results in DCI.as
+         DCI_as<-NULL
+         
+         for(s in 1:length(sections)){
+             DCI_s<-0
+             # Old notes:
+             # select out only the data that corresponds to pathways from one sectino 
+             # to all other sections
+             d_nrows<-subset(sum_tab_2020, FromEdgeName==sections[s])
+             d_sum_table<-d_nrows
+             
+             if(bDistanceLim==FALSE){
+                 for (a in 1:dim(d_nrows)[1]){
+                     # Old note:
+                     #to get the DCI for diadromous fish, use the following formula: 
+                     # DCId= li/L*Cj (where j= the product of the passability in the pathway)
+                     la<-d_sum_table$ToEdgeHab[a]/sum(FIPEX_table$HabQuantity)
+                     pass_d<-d_sum_table$CumulativePass[a]
+                     DCI_s<-round(DCI_s+la*pass_d*100, digits=2)
+                 } # end loop over sections for dci calc
+             }else{
+                 for (a in 1:dim(d_nrows)[1]){
+                     # Old note:
+                     #to get the DCI for diadromous fish, use the following formula: 
+                     # DCId= li/L*Cj (where j= the product of the passability in the pathway)
+                     la<-d_sum_table$ToEdgeHabMaxAccessible[a]/d_sum_table$MaxTotalAccessHabFromEdge
+                     pass_d<-d_sum_table$CumulativePass[a]
+                     DCI_s<-round(DCI_s+la*pass_d*100, digits=2)
+                 } # end loop over sections for dci calc
+             }
+             DCI_as[s]<-round(DCI_s*100,2)
+         } # end loop over "first" sections	
+ 
+         # STORE RESULTS IN .CSV file
+         DCIs<-data.frame(sections,DCI_as)
+     }else{
+         print("error in options passed to calc_DCIs")
+         DCIs <- 0.0
+     }
+     return(DCIs)
+ }
> 
> apply_distance_limits <- function(sum_tab_2020 = NULL, 
+                                 bDistanceLim=FALSE, 
+                                 dMaxDist=0.0,
+                                 bDistanceDecay=FALSE,
+                                 sDDFunction="none"){
+     
+     ### Calculate proportion of start-end distances for segments < dmax
+     ### 'a','b' = max,min dist possibly travelled
+     ### is destination segment reachable? based on min dist 'b'
+     
+     
+     #sum_tab_2020 <- sum_tab_2020 %>%
+     #mutate(ToEdgeHabProp = (DistMinusStartEndLen+ToEdgeLen-dMaxDist)/ToEdgeLen) %>%
+     #mutate(ToEdgeHabProp = ifelse(ToEdgeHabProp>=0,1-ToEdgeHabProp,1)) %>%
+     #mutate(ToEdgeHabMaxAccessible = ToEdgeHabProp * ToEdgeHab) %>%
+     #select(-ToEdgeHabProp)
+     
+     # function changes in 2022
+     get_max_accessible <- function(DistMinusStartEndLen,ToEdgeLen,
+                                    ToEdgeHab,dMaxDist,FromEdgeLen, 
+                                    FromEdgeName, ToEdgeName){
+ 
+         reachable_shortest_b = (dMaxDist-DistMinusStartEndLen)/ToEdgeLen
+         reachable_shortest_b = ifelse(reachable_shortest_b>0,1,reachable_shortest_b)
+         
+         prop_reachable_a = ifelse(FromEdgeName==ToEdgeName,
+                                   (dMaxDist)/ToEdgeLen,
+                                   (dMaxDist-DistMinusStartEndLen-FromEdgeLen)/ToEdgeLen)
+         prop_reachable_a = ifelse(prop_reachable_a>0,prop_reachable_a,0)
+         prop_reachable_a = ifelse(prop_reachable_a>1,1,prop_reachable_a)
+ 
+         
+         #ifelse statements for vectors, not testing a single val
+         # numerator is avg of prop_reachable_b (always 1) so removed and prop_reachable_a 
+         toedge_maxaccessible = ifelse(reachable_shortest_b==0,0,((prop_reachable_a * ToEdgeHab)+ ToEdgeHab)/ 2)
+         print(reachable_shortest_b)
+         print(prop_reachable_a)
+         toedge_maxaccessible
+         
+         
+         # old code from 2021
+ #         prop_accessible = (dMaxDist-DistMinusStartEndLen)/ToEdgeLen
+ #         prop_accessible = ifelse(prop_accessible>0,prop_accessible,0)
+ #         prop_accessible = ifelse(prop_accessible>1,1,prop_accessible)
+ #         toedge_maxaccessible = prop_accessible * ToEdgeHab
+ 
+         toedge_maxaccessible
+     }
+ 
+     sum_tab_2020[, ToEdgeHabMaxAccessible := get_max_accessible(DistMinusStartEndLen,
+                                                                 ToEdgeLen,ToEdgeHab,
+                                                                 dMaxDist,FromEdgeLen,
+                                                                 FromEdgeName, ToEdgeName)]
+     
+     if(bDistanceDecay==TRUE & sDDFunction!="none"){
+         sum_tab_2020 <- apply_distance_decay(sum_tab_2020,sDDFunction,dMaxDist)
+         # overwriting here because totals below should be based on weighted hab
+         sum_tab_2020$ToEdgeHabMaxAccessible = sum_tab_2020$toedgehabaccessible_dd
+     }
+     
+     # sum habitat accessible from edge and add as attribute
+     # in new column 
+     # remove duplicates first...
+         # to do: dplyr is slower than data.table - re-code and benchmark
+     sum_tab_hab <- sum_tab_2020 %>% 
+     distinct(ToFromEdgeNameCombo, .keep_all = TRUE) %>%
+     group_by(FromEdgeName) %>%
+     summarise(MaxTotalAccessHabFromEdge = sum(ToEdgeHabMaxAccessible))
+ 
+     sum_tab_2020 <- sum_tab_2020 %>%
+     left_join(sum_tab_hab, by = "FromEdgeName", copy=FALSE)
+     
+     return(data.table(sum_tab_2020))
+ }
> 
> apply_distance_decay <- function(sum_tab_2020=NULL,
+                               sDDFunction="none",
+                               dMaxDist = 0.0){
+ 
+ # distance decay options: "linear" - linear (1-x), 
+ #                         "natexp1"- natural exponential #1 (general form: e^x), 
+ #                         "natexp2" - natural exponential #2 (general form: e^x^2), 
+ #                         "circle" - based on equation of circle ((1-x^2)^0.5)
+ #                         "sigmoid" - sigmoid (general form:1/(1+e^x)
+ # functions chosen because they can be integrated analytically.
+ # for analytical solutions see documentation. 
+ # general form modified so intercepts are (0,1),(1,0) - sometimes approximate
+ # G Oldford, 2020
+ 
+ # to do: data.tables with many columns don't perform well and melt() may 
+ #        help
+ 
+ ########## General Formulas ##########
+ #  multiplies the 'maximum accessible habitat' at edge j by f_avg(a,b)
+ # (max accessible is pre-calculated earlier using cut-off value and distance of edge j from edge i)
+ # ===== GO Feb 2022 - changed 'b' to add in the start edge len i (see write-up)
+ # 
+ # avg value of a dd function:
+ # f_avg(a,b,f(x)) = 1/(b-a)*integral_a_to_b(f(x)dx)
+ #           represents average value of distance decay function f(x) between 
+ #           two positions, a and b, along total distance from end of edge i to maxdist
+ #           where a and b are positions from 0 to maxdist (maxdist is always
+ #           rescaled to 1. 
+ # 'a' - proportion of maxdist reached at start of edge j 
+ # 'b' - proportion of maxdist reached at end of edge j 
+     e = exp(1)
+     
+ ########## LINEAR distance decay function ##########
+ # function: (1-x) where x is proportion of maxdist
+ # f_avg = ((1-b)+(1-a))/2 
+ # toedgehabaccessible_dd = f_avg(a,b)*ToEdgeHabMaxAccessible
+     f_avg_linear <- function(a,b) {((1-b)+(1-a))/2}
+ 
+ ########## natural exponential DD Function #1 ########## 
+ ########## general form: (-e^x) ##########
+ # parameterized function: f(x) = 1-e^(5(x-5)) with zero intercepts (0,1),(1,0)
+ # integral of f(x) = F_int = x - e^(5(x-1))/5)
+ # f_avg(a,b,f(x)) = 1/(b-a)*(b - e^(5(b-1))/5 -(a - e^(5(a-1))/5))
+     integral_fx_natexp1 <- function(x){x-e^(5*(x-1))/5}
+     f_avg_natexp1 <- function(a,b) {(1/(b-a)*(integral_fx_natexp1(b)-integral_fx_natexp1(a)))}
+ 
+ ########## natural exponential DD Function #2 ########## 
+ ########## general form: -e^x^2 ##########
+ # parameterized function: f(x) = 2 - e^((x^2)*1/1.44)
+ # integral of f(x) = F_int = ((pi*i)^1/3 * erf(5*i*x/6)) / 5 + 2*x
+ # f_avg(a,b,f(x)) = to do
+     # Note complete - can't be done without special erfi function 
+     erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
+     integral_fx_natexp2 <- function(x){((pi*i)^1/3 * erf(5*i*x/6)) / 5 + 2*x}
+ 
+ ########## CIRCULAR DD Function ########## 
+ ########## general form: (1-x^2)^0.5  ##########
+ # parameterized function: f(x) = (1-x^2)^0.5
+ # integral of f(x) = F_int = (asin(x)+x*(1-x^2)^0.5)/2
+ # f_avg(a,b,f(x)) = (asin(b)+b*(1-b^2)^0.5)/2 - (asin(a)+a*(1-a^2)^0.5)/2
+     integral_fx_circle <- function(x){(asin(x)+x*(1-x^2)^0.5)/2}
+     f_avg_circle <- function(a,b){((asin(b)+b*(1-b^2)^0.5)/2 - (asin(a)+a*(1-a^2)^0.5)/2)}
+ 
+ 
+ ###### SIGMOID DD function ###### 
+ #      general form: 1/(e^x+1))  #
+ # parameterized function: f(x) = 1/(e^(10(x*0.5)))+1
+ # integral f(x) = F_int = x - ln(e^10x+e^5)/10
+ # f_avg(a,b,f(x)) = 1/(b-a)*(b - ln(e^10b+e^5)/10- a - ln(e^10a+e^5)/10)
+     integral_fx_sigmoid <- function(x){x - log(e^10*x+e^5)/10}
+     f_avg_sigmoid <- function(a,b) {(1/(b-a)*(integral_fx_sigmoid(b)-integral_fx_sigmoid(a)))}
+ 
+ ##### Calculate distance-decay weighted habitat accessible ######
+ ##### (at each edge j from each each i)
+ # ========= GO Feb 2022 - modified a to be from node at start of line ====
+     #get_dd_habitat <- function(DistMinusStartEndLen,ToEdgeHabMaxAccessible,dMaxDist,sDDFunction){
+     get_dd_habitat <- function(DistMinusStartEndLen,ToEdgeHabMaxAccessible,dMaxDist,sDDFunction, FromEdgeLen){
+         
+         a = round(DistMinusStartEndLen/dMaxDist,3)
+         b = round((FromEdgeLen+DistMinusStartEndLen+ToEdgeHabMaxAccessible)/dMaxDist,3)
+         
+         a = ifelse(a<0,0,a)
+         a = ifelse(a>1,1,a)
+         b = ifelse(b<0,0,b)
+         b = ifelse(b>1,1,b)
+    
+         if(sDDFunction=="linear"){
+             toedgehab_dd <- ToEdgeHabMaxAccessible * f_avg_linear(a,b)
+         }else if(sDDFunction=="natexp1"){
+             toedgehab_dd <- ToEdgeHabMaxAccessible*f_avg_natexp1(a,b)
+         }else if(sDDFunction=="natexp2"){
+             # to do
+         }else if(sDDFunction=="circle"){
+             toedgehab_dd <- ToEdgeHabMaxAccessible*f_avg_circle(a,b)
+         }else if(sDDFunction=="sigmoid"){
+             toedgehab_dd <- ToEdgeHabMaxAccessible*f_avg_sigmoid(a,b)
+         }
+       
+         # if segment << cutoff distance this can result in NaN's which cause issues.
+         toedgehab_dd[ is.nan(toedgehab_dd) ] <- 0
+ 
+         toedgehab_dd
+     }
+ 
+     sum_tab_2020[, toedgehabaccessible_dd := round(get_dd_habitat(DistMinusStartEndLen,
+                                                                    ToEdgeHabMaxAccessible,
+                                                                    dMaxDist,
+                                                                    sDDFunction,
+                                                                    FromEdgeLen),2)]
+     return(sum_tab_2020)
+     
+ }
> 
> # ########################################
> # ########## MAIN CODE SECTION ############
> 
> # intialize file with error code
> write("ERROR",file='out_dd.txt')
> 
> # required libraries
> library(RBGL) 
Loading required package: graph
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

> library(data.table) 
Warning message:
package 'data.table' was built under R version 3.6.3 
> library(tidyverse)
-- Attaching packages --------------------------------------- tidyverse 1.3.0 --
v ggplot2 3.2.1     v purrr   0.3.4
v tibble  2.1.3     v dplyr   1.0.2
v tidyr   1.1.2     v stringr 1.4.0
v readr   1.3.1     v forcats 0.4.0
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::between()    masks data.table::between()
x stringr::boundary() masks graph::boundary()
x dplyr::combine()    masks BiocGenerics::combine()
x dplyr::filter()     masks stats::filter()
x dplyr::first()      masks data.table::first()
x dplyr::lag()        masks stats::lag()
x dplyr::last()       masks data.table::last()
x ggplot2::Position() masks BiocGenerics::Position(), base::Position()
x purrr::transpose()  masks data.table::transpose()
Warning messages:
1: package 'tidyverse' was built under R version 3.6.3 
2: package 'tidyr' was built under R version 3.6.3 
3: package 'purrr' was built under R version 3.6.3 
4: package 'dplyr' was built under R version 3.6.3 
> # RBGL and Rgraphviz must be installed via BioconductR
> #install.packages("BiocManager")
> #BiocManager::install("Rgraphviz")
> #BiocManager::install("RBGL")
> 
> # optional libraries
> #library(Rgraphviz) # only needed for visuals
> #library(rbenchmark) 
> 
> ########## 1) DATA PREP #########
> 
> # 'Advanced' table includes habitat, length, connectivity info in one table
> FIPEX_table=read.csv("FIPEX_Advanced_DD_2020.csv")
> # ensure it's "sink" not "Sink"
> FIPEX_table <- FIPEX_table %>%
+ mutate(DownstreamEID = ifelse(DownstreamEID == "Sink","sink",as.character(DownstreamEID)))
> 
> # for testing only: natural TF set node 84 to natural barrier
> #FIPEX_table[2,]$NaturalTF <- TRUE
> #FIPEX_table
> 
> # The params file allows users to pass param settings
> # to R from within the ArcMap software (new in 2020)
> FIPEX_params=read.csv("FIPEX_2020_params.csv")
> 
> ###### 2) PARAMETERIZATION #######
> 
> bDCISectional <- as.logical(FIPEX_params$bDCISectional)
> bDistanceLim <- as.logical(FIPEX_params$bDistanceLim)
> dMaxDist <- as.double(FIPEX_params$dMaxDist)
> bDistanceDecay <- as.logical(FIPEX_params$bDistanceDecay)
> sDDFunction <- as.character(FIPEX_params$sDDFunction)
> # for testing:
> #sDDFunction = "linear"
> #sDDFunction = "natexp1"
> #sDDFunction = "circle"
> #sDDFunction = "sigmoid"
> #sDDFunction = "none"
> #bDistanceLim = FALSE
> #dMaxDist = 1000
> #bDistanceDecay = FALSE
> naturalonly = FALSE
> #bDCISectional = TRUE
> bDCIp = TRUE
> 
> totalhabitat = sum(FIPEX_table$HabQuantity)
> totallength = sum(FIPEX_table$DownstreamNeighDistance)
> 
> ######### 3) NETWORK ANALYSIS #########
> 
> # build adjacency matrix
> edgeweighted_adj_matrix <- create_advanced_adjmatrix_2020(FIPEX_table)
> 
> # build graph object
> g_dd <- create_graph_dd_2020(edgeweighted_adj_matrix,FIPEX_table)
> 
> # build summary table (analyses to determine paths, pass, etc between edges)
> sum_tab_2020 <- get_summary_tab_2020(option="dt-lists",
+                                      naturalonly,
+                                      g_dd,
+                                      bDCIp,
+                                      bDistanceLim,
+                                      dMaxDist)
> 
> if(bDistanceLim==TRUE){
+     sum_tab_2020 <- apply_distance_limits(sum_tab_2020, bDistanceLim, dMaxDist, bDistanceDecay, sDDFunction)
+ }
   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1555] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1592] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1629] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1666] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1703] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1740] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1777] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1814] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1851] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1888] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1925] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1962] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[1999] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2036] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2073] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2110] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2147] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2184] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2221] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2258] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2295] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2332] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2369] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2406] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2443] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2480] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2517] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2554] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2591] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2628] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2665] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2702] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2739] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2776] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2813] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2850] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2887] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2924] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2961] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[2998] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3035] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3072] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3109] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3146] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3183] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3220] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3257] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3294] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3331] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3368] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3405] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3442] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3479] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3516] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3553] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3590] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3627] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3664] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3701] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3738] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3775] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3812] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3849] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3886] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3923] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3960] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[3997] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4034] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4071] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4108] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4145] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4182] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4219] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4256] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4293] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4330] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4367] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4404] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4441] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4478] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4515] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4552] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4589] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4626] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4663] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4700] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4737] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4774] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4811] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4848] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4885] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4922] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4959] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[4996] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5033] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5070] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5107] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5144] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5181] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5218] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5255] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5292] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5329] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5366] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5403] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5440] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5477] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5514] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5551] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5588] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5625] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5662] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5699] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5736] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5773] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5810] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5847] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5884] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5921] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5958] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[5995] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[6032] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[6069] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[6106] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
   [1] 0.767865675 1.000000000 0.620194307 0.000000000 0.000000000 0.000000000
   [7] 0.000000000 0.556523351 0.491867786 0.000000000 0.000000000 0.000000000
  [13] 0.000000000 0.000000000 0.000000000 0.000000000 0.752621632 0.000000000
  [19] 1.000000000 0.467867467 0.000000000 0.000000000 1.000000000 0.647509964
  [25] 0.831577780 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
  [31] 0.000000000 0.461623684 0.000000000 0.000000000 0.000000000 0.000000000
  [37] 1.000000000 1.000000000 1.000000000 0.686058116 0.440686275 0.000000000
  [43] 0.920102279 0.000000000 0.461771011 1.000000000 1.000000000 1.000000000
  [49] 0.631645463 0.736027740 0.770059572 1.000000000 1.000000000 1.000000000
  [55] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.171311310
  [61] 0.000000000 1.000000000 0.915858556 0.000000000 0.476733345 1.000000000
  [67] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
  [73] 1.000000000 1.000000000 0.020960443 1.000000000 0.112057988 0.342514598
  [79] 1.000000000 0.491867786 0.000000000 1.000000000 1.000000000 1.000000000
  [85] 1.000000000 0.633840987 0.000000000 0.000000000 0.469241868 1.000000000
  [91] 0.912747583 1.000000000 1.000000000 0.572863581 1.000000000 1.000000000
  [97] 1.000000000 1.000000000 1.000000000 1.000000000 0.869373066 1.000000000
 [103] 0.000000000 0.590341971 0.000000000 0.191154582 1.000000000 0.662650602
 [109] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.331618158
 [115] 1.000000000 0.000000000 0.000000000 0.688056189 0.064341134 1.000000000
 [121] 1.000000000 1.000000000 1.000000000 0.140865666 0.032199002 0.149849632
 [127] 0.000000000 0.000000000 0.339266015 0.015580647 1.000000000 1.000000000
 [133] 1.000000000 1.000000000 0.667684766 0.007797209 1.000000000 0.310840627
 [139] 0.840345676 1.000000000 1.000000000 0.552842014 0.000000000 0.000000000
 [145] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
 [151] 0.188129735 0.002306313 1.000000000 0.101932367 1.000000000 1.000000000
 [157] 0.697970366 0.054374566 1.000000000 1.000000000 1.000000000 1.000000000
 [163] 0.690874811 1.000000000 0.027211314 0.333455909 0.235189314 1.000000000
 [169] 1.000000000 1.000000000 1.000000000 1.000000000 0.319200332 1.000000000
 [175] 1.000000000 1.000000000 1.000000000 1.000000000 0.647509964 0.000000000
 [181] 0.805008945 0.676396759 0.000000000 0.000000000 0.000000000 0.831577780
 [187] 0.000000000 1.000000000 0.000000000 0.000000000 1.000000000 0.000000000
 [193] 0.000000000 0.953657175 0.000000000 0.000000000 0.000000000 0.000000000
 [199] 0.349662511 1.000000000 0.000000000 0.213141736 0.000000000 0.518774054
 [205] 1.000000000 1.000000000 0.000000000 0.805008945 0.000000000 0.264293898
 [211] 1.000000000 0.000000000 0.676396759 0.000000000 1.000000000 1.000000000
 [217] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
 [223] 0.229758619 0.325478453 0.147806930 0.563936752 0.591561575 1.000000000
 [229] 1.000000000 0.587352884 1.000000000 1.000000000 0.332675375 0.000000000
 [235] 0.000000000 0.224701147 0.000000000 0.153483947 1.000000000 1.000000000
 [241] 0.154741583 0.275361266 1.000000000 0.108860110 0.443014066 1.000000000
 [247] 1.000000000 0.961661752 0.000000000 0.000000000 0.179457229 1.000000000
 [253] 1.000000000 0.433837020 0.000000000 0.000000000 0.000000000 0.345800066
 [259] 0.000000000 1.000000000 0.463831454 0.323438328 0.000000000 0.961661752
 [265] 0.488498572 0.000000000 0.000000000 0.000000000 0.591863845 0.000000000
 [271] 0.000000000 0.000000000 0.000000000 0.000000000 0.463831454 0.000000000
 [277] 0.000000000 0.000000000 0.000000000 0.374005768 0.000000000 0.000000000
 [283] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
 [289] 0.153223871 0.162577868 0.000000000 0.000000000 0.000000000 0.375939850
 [295] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
 [301] 0.223562883 0.209061049 0.358796992 1.000000000 1.000000000 1.000000000
 [307] 0.885022337 1.000000000 1.000000000 0.041613821 0.088820931 0.314452799
 [313] 1.000000000 1.000000000 1.000000000 0.544345168 1.000000000 1.000000000
 [319] 0.902169815 0.657515007 0.000000000 0.000000000 0.193408521 1.000000000
 [325] 1.000000000 0.078749058 0.021114310 0.000000000 0.000000000 0.000000000
 [331] 0.000000000 0.020634921 0.477119471 1.000000000 1.000000000 0.702037819
 [337] 0.000000000 0.000000000 0.319263385 0.000000000 1.000000000 1.000000000
 [343] 1.000000000 1.000000000 1.000000000 1.000000000 0.586351466 0.201210780
 [349] 0.377208091 0.000000000 0.000000000 0.000000000 0.912223799 0.000000000
 [355] 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.168751470
 [361] 1.000000000 1.000000000 1.000000000 0.082393755 0.421526104 0.000000000
 [367] 0.000000000 0.059958229 1.000000000 1.000000000 1.000000000 1.000000000
 [373] 0.105102281 1.000000000 1.000000000 0.958047344 0.000000000 0.508497992
 [379] 0.000000000 0.000000000 0.037343358 0.000000000 0.000000000 0.000000000
 [385] 0.821334669 0.000000000 1.000000000 1.000000000 0.297202401 1.000000000
 [391] 0.559859581 0.000000000 0.246868550 0.000000000 0.000000000 0.000000000
 [397] 0.000000000 0.000000000 0.000000000 0.000000000 0.053524477 0.000000000
 [403] 1.000000000 0.315847802 0.000000000 1.000000000 0.000000000 0.245966625
 [409] 0.548431040 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000
 [415] 1.000000000 1.000000000 0.314003445 0.296120297 0.202002804 0.646219339
 [421] 0.000000000 0.784301733 0.000000000 1.000000000 0.319686281 0.000000000
 [427] 0.000000000 0.000000000 0.712803536 0.000000000 0.000000000 0.000000000
 [433] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
 [439] 0.475611010 1.000000000 0.000000000 1.000000000 1.000000000 0.800654758
 [445] 0.523160128 0.059569108 0.031539605 0.477119471 0.000000000 0.000000000
 [451] 0.000000000 0.000000000 1.000000000 0.050341405 0.260421237 0.000000000
 [457] 0.000000000 0.000000000 0.649542169 1.000000000 1.000000000 0.359707494
 [463] 1.000000000 0.709922062 0.000000000 0.000000000 0.375877065 0.072931727
 [469] 1.000000000 1.000000000 0.040388584 0.700056930 1.000000000 0.000000000
 [475] 0.887472641 0.504353552 0.625234463 0.000000000 0.000000000 0.000000000
 [481] 0.000000000 0.000000000 0.000000000 0.000000000 0.332675375 0.000000000
 [487] 0.000000000 0.488498572 1.000000000 1.000000000 1.000000000 0.000000000
 [493] 0.719656992 0.442686743 1.000000000 1.000000000 1.000000000 1.000000000
 [499] 1.000000000 1.000000000 0.335547207 0.288612594 0.215862207 0.667261301
 [505] 0.273418079 1.000000000 1.000000000 0.674116104 0.000000000 0.367758623
 [511] 0.416179073 1.000000000 1.000000000 1.000000000 0.091877120 0.519612485
 [517] 0.000000000 0.000000000 0.082903636 1.000000000 0.074138849 1.000000000
 [523] 1.000000000 0.011258270 0.000000000 0.591863845 0.000000000 0.000000000
 [529] 0.920375773 0.000000000 0.000000000 1.000000000 0.000000000 0.000000000
 [535] 0.548305735 0.000000000 0.222298915 1.000000000 0.572573312 0.000000000
 [541] 1.000000000 1.000000000 1.000000000 0.000000000 0.000000000 0.000000000
 [547] 0.519612485 0.000000000 0.000000000 1.000000000 0.422870116 0.326917081
 [553] 1.000000000 0.672123312 1.000000000 1.000000000 1.000000000 1.000000000
 [559] 1.000000000 1.000000000 0.781698180 0.133135153 0.502877362 0.721427123
 [565] 0.000000000 0.000000000 0.319686281 1.000000000 0.229205630 1.000000000
 [571] 0.000000000 0.000000000 0.000000000 0.000000000 0.210324271 0.310912669
 [577] 1.000000000 0.168422089 1.000000000 0.154547918 0.000000000 0.611803783
 [583] 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
 [589] 1.000000000 0.689814607 0.111948455 0.108686748 0.173052573 0.033083978
 [595] 1.000000000 1.000000000 1.000000000 1.000000000 0.195376750 0.832922755
 [601] 0.000000000 1.000000000 0.000000000 0.000000000 0.000000000 0.000000000
 [607] 0.000000000 0.000000000 0.800654758 0.000000000 0.000000000 0.000000000
 [613] 0.000000000 0.000000000 0.000000000 0.000000000 0.712803536 0.000000000
 [619] 1.000000000 0.796361175 1.000000000 0.665608274 0.389313382 0.616362366
 [625] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
 [631] 0.795438036 0.128347003 0.511716403 0.708007298 0.633698183 1.000000000
 [637] 0.895771956 1.000000000 0.892134628 0.521808341 0.000000000 0.000000000
 [643] 0.000000000 0.000000000 0.547959841 0.000000000 0.256466126 1.000000000
 [649] 0.354153898 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
 [655] 0.384075333 1.000000000 0.000000000 0.000000000 1.000000000 1.000000000
 [661] 1.000000000 0.095772026 1.000000000 0.774081222 1.000000000 1.000000000
 [667] 1.000000000 0.302515630 0.023921078 0.968378513 1.000000000 1.000000000
 [673] 1.000000000 1.000000000 0.943950327 1.000000000 1.000000000 0.433236875
 [679] 0.103185152 0.084627091 0.000000000 0.977064581 1.000000000 1.000000000
 [685] 1.000000000 0.000000000 1.000000000 0.937007048 1.000000000 1.000000000
 [691] 0.467445225 0.111332644 0.082145775 0.000000000 0.822237384 1.000000000
 [697] 1.000000000 1.000000000 0.000000000 0.912102798 0.487393019 0.689240901
 [703] 1.000000000 1.000000000 0.000000000 0.638925811 0.000000000 0.000000000
 [709] 0.000000000 0.000000000 0.000000000 0.625234463 0.000000000 0.000000000
 [715] 0.000000000 0.000000000 0.000000000 0.299052667 1.000000000 1.000000000
 [721] 1.000000000 0.833833321 0.395032724 0.558630714 0.000000000 0.000000000
 [727] 0.000000000 0.000000000 0.000000000 0.000000000 0.943950327 0.000000000
 [733] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
 [739] 0.000000000 0.083737896 1.000000000 1.000000000 1.000000000 0.233482110
 [745] 0.424120447 0.236805672 0.000000000 0.000000000 0.000000000 0.000000000
 [751] 0.337338921 0.000000000 0.000000000 0.000000000 0.000000000 0.895771956
 [757] 0.000000000 0.000000000 0.000000000 0.000000000 0.232437313 1.000000000
 [763] 1.000000000 0.391512063 1.000000000 1.000000000 0.695271620 1.000000000
 [769] 0.000000000 0.421651419 0.200379020 0.200988919 0.000000000 0.000000000
 [775] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
 [781] 0.000000000 0.906126638 0.000000000 1.000000000 0.608988645 0.000000000
 [787] 0.000000000 0.000000000 0.000000000 0.000000000 1.000000000 1.000000000
 [793] 1.000000000 1.000000000 1.000000000 1.000000000 0.933978124 0.000000000
 [799] 0.080067700 0.600841178 0.000000000 0.000000000 0.000000000 0.572694101
 [805] 0.000000000 0.000000000 0.288488868 0.000000000 1.000000000 0.331488705
 [811] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000
 [817] 0.723996775 0.833853147 0.660810086 1.000000000 0.402718330 0.248863109
 [823] 0.401354697 0.000000000 0.915021755 0.000000000 1.000000000 1.000000000
 [829] 1.000000000 1.000000000 1.000000000 0.398033865 1.000000000 0.862201104
 [835] 0.812103073 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
 [841] 0.220653968 0.000000000 0.000000000 0.141915364 1.000000000 0.163068130
 [847] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.839142839
 [853] 0.000000000 0.744082590 0.589668915 1.000000000 0.681534880 0.421160093
 [859] 0.465187044 0.808871909 1.000000000 1.000000000 1.000000000 1.000000000
 [865] 1.000000000 0.504248589 0.482991224 0.382759810 1.000000000 1.000000000
 [871] 0.711322506 0.279535140 0.000000000 0.869176483 0.000000000 1.000000000
 [877] 1.000000000 1.000000000 1.000000000 1.000000000 0.574737952 0.537946375
 [883] 0.426310546 1.000000000 1.000000000 0.816798144 0.318611608 0.000000000
 [889] 0.619388730 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000
 [895] 1.000000000 1.000000000 1.000000000 0.310316482 0.245918915 0.676436236
 [901] 0.000000000 0.000000000 0.773621235 0.000000000 0.616362366 0.000000000
 [907] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
 [913] 0.000000000 0.710885681 0.000000000 0.000000000 1.000000000 1.000000000
 [919] 0.000000000 0.000000000 0.000000000 0.219261450 0.433922301 1.000000000
 [925] 1.000000000 0.133836474 1.000000000 0.283811866 0.665010434 1.000000000
 [931] 0.343052574 0.000000000 0.000000000 0.047592331 0.000000000 0.000000000
 [937] 0.000000000 0.536717436 0.376864853 0.000000000 0.000000000 1.000000000
 [943] 1.000000000 1.000000000 0.703131160 0.000000000 0.000000000 0.311694788
 [949] 0.000000000 0.000000000 0.081950789 0.000000000 0.654908337 1.000000000
 [955] 1.000000000 1.000000000 0.641466054 0.000000000 0.327126009 0.000000000
 [961] 0.000000000 0.000000000 0.172962901 0.000000000 0.000000000 0.000000000
 [967] 0.000000000 0.000000000 0.682542090 0.000000000 0.453049020 0.930040302
 [973] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
 [979] 0.000000000 0.000000000 0.624800411 0.069317318 1.000000000 1.000000000
 [985] 0.638396125 0.000000000 0.000000000 0.018306874 0.000000000 0.473613261
 [991] 1.000000000 0.424847725 1.000000000 1.000000000 1.000000000 1.000000000
 [997] 1.000000000 0.685862866 0.000000000 0.000000000 0.000000000 0.354902205
[1003] 0.000000000 0.000000000 0.000000000 0.850706764 0.000000000 1.000000000
[1009] 1.000000000 1.000000000 1.000000000 0.665024631 0.000000000 0.000000000
[1015] 0.140113758 1.000000000 1.000000000 0.171598041 0.000000000 0.000000000
[1021] 0.000000000 0.450582869 0.000000000 1.000000000 1.000000000 0.048105880
[1027] 1.000000000 1.000000000 1.000000000 1.000000000 0.536820526 1.000000000
[1033] 0.834719952 0.740729282 0.446809709 1.000000000 1.000000000 0.042796006
[1039] 1.000000000 1.000000000 1.000000000 1.000000000 0.541112784 1.000000000
[1045] 0.839696925 0.746651934 0.401081264 1.000000000 0.963213416 0.000000000
[1051] 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000 0.593132387
[1057] 1.000000000 0.900014857 0.818430939 0.000000000 0.775018967 0.000000000
[1063] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[1069] 0.603762302 1.000000000 1.000000000 0.577936409 1.000000000 1.000000000
[1075] 1.000000000 1.000000000 1.000000000 1.000000000 0.461367883 1.000000000
[1081] 1.000000000 0.005778120 1.000000000 1.000000000 1.000000000 0.004456990
[1087] 0.257900552 0.000000000 0.000000000 0.000000000 0.388385978 1.000000000
[1093] 1.000000000 1.000000000 0.000000000 0.299584014 0.609104972 0.000000000
[1099] 0.000000000 0.311694788 0.000000000 0.000000000 0.000000000 1.000000000
[1105] 0.562965453 0.000000000 0.301595877 1.000000000 0.581816301 0.000000000
[1111] 0.000000000 0.000000000 0.000000000 0.453049020 0.000000000 1.000000000
[1117] 1.000000000 1.000000000 0.565327600 1.000000000 1.000000000 0.633975413
[1123] 0.000000000 0.930040302 0.000000000 0.000000000 0.147436086 0.000000000
[1129] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[1135] 0.358154787 0.000000000 0.147436086 0.139109575 0.000000000 0.000000000
[1141] 0.105085189 0.119753468 0.000000000 0.000000000 0.000000000 0.000000000
[1147] 0.000000000 0.139109575 0.000000000 0.000000000 0.000000000 0.000000000
[1153] 0.000000000 0.000000000 0.000000000 0.000000000 0.933978124 1.000000000
[1159] 0.000000000 0.000000000 1.000000000 0.130762418 0.081621569 0.000000000
[1165] 0.322512924 1.000000000 1.000000000 1.000000000 1.000000000 0.175059024
[1171] 0.087934217 0.124351102 1.000000000 0.195215567 1.000000000 0.000000000
[1177] 0.107121865 0.000000000 0.000000000 0.000000000 0.000000000 0.107145320
[1183] 0.000000000 1.000000000 1.000000000 1.000000000 0.234254622 0.000000000
[1189] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[1195] 0.870377504 1.000000000 1.000000000 0.000000000 0.395944777 0.000000000
[1201] 0.546342541 0.000000000 0.000000000 0.000000000 0.802195686 1.000000000
[1207] 1.000000000 0.000000000 0.716710977 0.000000000 0.618778785 0.068596321
[1213] 1.000000000 0.000000000 0.336552079 1.000000000 0.000000000 0.000000000
[1219] 0.000000000 1.000000000 0.000000000 0.869492443 0.000000000 0.000000000
[1225] 0.556146310 0.000000000 1.000000000 1.000000000 0.553340517 0.000000000
[1231] 0.527964521 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[1237] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[1243] 0.000000000 0.229690700 0.000000000 0.000000000 0.000000000 1.000000000
[1249] 0.452046300 1.000000000 1.000000000 1.000000000 0.520024953 0.265085120
[1255] 0.402588622 0.000000000 0.000000000 0.000000000 0.368197972 1.000000000
[1261] 1.000000000 1.000000000 0.756071065 1.000000000 1.000000000 0.304009083
[1267] 0.316198013 1.000000000 1.000000000 1.000000000 0.639176191 1.000000000
[1273] 1.000000000 0.101793125 0.119121689 1.000000000 1.000000000 1.000000000
[1279] 0.196152540 1.000000000 0.410733502 0.000000000 0.000000000 0.000000000
[1285] 0.070301044 0.000000000 0.000000000 1.000000000 0.000000000 0.408162261
[1291] 1.000000000 1.000000000 0.406103056 0.457428461 0.000000000 0.102594398
[1297] 0.000000000 0.186021601 1.000000000 0.000000000 1.000000000 0.000000000
[1303] 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000 0.000000000
[1309] 0.905784679 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[1315] 0.000000000 0.527964521 0.000000000 0.000000000 0.000000000 1.000000000
[1321] 0.124107649 0.600765464 1.000000000 1.000000000 1.000000000 0.401938179
[1327] 0.000000000 0.000000000 0.067661526 1.000000000 0.089109993 0.000000000
[1333] 0.000000000 0.513815072 1.000000000 0.106573227 0.617309354 1.000000000
[1339] 1.000000000 1.000000000 0.361637427 0.000000000 0.000000000 0.000000000
[1345] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.848525666
[1351] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.811520376
[1357] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000
[1363] 0.000000000 0.581816301 1.000000000 1.000000000 1.000000000 1.000000000
[1369] 0.502042822 1.000000000 1.000000000 1.000000000 1.000000000 0.256244828
[1375] 1.000000000 1.000000000 0.387535491 0.773183028 0.390478056 1.000000000
[1381] 1.000000000 1.000000000 1.000000000 1.000000000 0.199745298 1.000000000
[1387] 1.000000000 1.000000000 1.000000000 1.000000000 0.046674597 1.000000000
[1393] 1.000000000 0.143362059 0.554013482 0.251482477 1.000000000 1.000000000
[1399] 1.000000000 1.000000000 1.000000000 0.867115632 0.000000000 0.163027173
[1405] 1.000000000 1.000000000 1.000000000 0.132822478 0.000000000 0.669800742
[1411] 1.000000000 0.000000000 0.675460825 0.000000000 0.000000000 0.000000000
[1417] 0.000000000 1.000000000 0.273802751 1.000000000 1.000000000 0.840991224
[1423] 0.776462237 0.000000000 0.000000000 0.000000000 1.000000000 0.000000000
[1429] 0.000000000 0.654269472 0.000000000 0.000000000 0.000000000 0.000000000
[1435] 1.000000000 0.381555417 0.000000000 0.296894484 1.000000000 0.045505645
[1441] 0.045967882 0.000000000 0.548305735 0.468642603 0.000000000 0.000000000
[1447] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[1453] 0.672123312 0.087152666 1.000000000 1.000000000 1.000000000 0.804306010
[1459] 0.000000000 0.158793244 0.000000000 0.517823928 0.502736717 0.000000000
[1465] 0.000000000 1.000000000 0.287331430 1.000000000 0.197010090 0.000000000
[1471] 0.862912040 0.837770414 0.000000000 0.000000000 0.000000000 0.000000000
[1477] 0.000000000 1.000000000 0.756324441 0.726022867 0.000000000 1.000000000
[1483] 0.000000000 1.000000000 0.000000000 0.000000000 0.548267828 1.000000000
[1489] 0.672654789 0.645705377 1.000000000 1.000000000 0.569793355 0.000000000
[1495] 0.566591478 0.000000000 1.000000000 1.000000000 0.120003780 0.000000000
[1501] 0.085715250 0.766814025 0.000000000 0.000000000 1.000000000 1.000000000
[1507] 0.266194793 0.000000000 0.000000000 0.000000000 0.862912040 0.000000000
[1513] 0.000000000 0.000000000 0.370825127 0.000000000 0.000000000 0.331459971
[1519] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.837770414
[1525] 0.000000000 0.000000000 1.000000000 0.946918933 0.669961577 0.419107580
[1531] 0.000000000 0.000000000 0.402520758 1.000000000 1.000000000 1.000000000
[1537] 0.201367222 0.367595668 0.192629588 0.000000000 0.000000000 0.000000000
[1543] 0.000000000 0.569793355 0.000000000 0.000000000 0.948158604 1.000000000
[1549] 0.686880268 0.000000000 0.000000000 0.000000000 0.296894484 0.370825127
[1555] 0.000000000 0.000000000 0.000000000 0.000000000 1.000000000 0.000000000
[1561] 0.544420206 1.000000000 0.557438795 0.000000000 1.000000000 0.681044268
[1567] 0.000000000 0.346208734 1.000000000 0.000000000 0.000000000 0.000000000
[1573] 0.000000000 0.000000000 0.069723329 0.000000000 0.000000000 0.000000000
[1579] 0.000000000 0.862201104 0.000000000 0.000000000 0.000000000 0.000000000
[1585] 0.000000000 0.000000000 0.000000000 1.000000000 1.000000000 1.000000000
[1591] 0.000000000 0.578050263 0.334124816 0.142284835 1.000000000 0.510227381
[1597] 1.000000000 1.000000000 1.000000000 0.505880386 0.000000000 0.000000000
[1603] 0.000000000 1.000000000 1.000000000 0.000000000 0.000000000 0.000000000
[1609] 0.000000000 0.502580342 1.000000000 1.000000000 0.000000000 1.000000000
[1615] 1.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[1621] 0.855901891 0.000000000 1.000000000 1.000000000 0.752222563 1.000000000
[1627] 1.000000000 1.000000000 0.729737586 0.000000000 0.000000000 0.000000000
[1633] 0.382975464 0.419106376 1.000000000 1.000000000 1.000000000 1.000000000
[1639] 1.000000000 1.000000000 0.095102576 0.235010766 0.244002912 1.000000000
[1645] 1.000000000 1.000000000 0.947675801 0.000000000 0.000000000 0.000000000
[1651] 0.157232704 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[1657] 0.000000000 0.773621235 0.000000000 0.000000000 0.000000000 0.000000000
[1663] 0.000000000 0.000000000 0.000000000 0.411768089 1.000000000 0.783346099
[1669] 1.000000000 1.000000000 0.869866099 0.000000000 0.003220982 1.000000000
[1675] 0.006127585 1.000000000 1.000000000 0.827382171 0.267168987 1.000000000
[1681] 0.508261298 1.000000000 1.000000000 0.921338193 0.236317159 1.000000000
[1687] 1.000000000 0.375871654 0.000000000 0.000000000 0.000000000 0.000000000
[1693] 0.000000000 0.000000000 0.000000000 0.337338921 1.000000000 1.000000000
[1699] 0.704442386 0.000000000 0.000000000 0.216586580 1.000000000 1.000000000
[1705] 1.000000000 0.060802050 0.127254733 0.000000000 0.000000000 0.000000000
[1711] 0.000000000 0.000000000 0.000000000 0.000000000 0.921338193 0.000000000
[1717] 0.000000000 0.247454681 1.000000000 0.000000000 0.000000000 0.686425553
[1723] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[1729] 1.000000000 0.662035917 0.613813841 0.000000000 0.468642603 0.000000000
[1735] 0.419107580 0.000000000 0.000000000 0.000000000 0.000000000 0.321486118
[1741] 0.000000000 1.000000000 0.157018540 0.000000000 0.000000000 0.000000000
[1747] 0.681044268 0.000000000 1.000000000 0.040800821 0.325478453 0.000000000
[1753] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[1759] 0.000000000 0.000000000 0.000000000 0.000000000 0.382975464 0.000000000
[1765] 0.000000000 0.000000000 0.000000000 1.000000000 0.000000000 0.000000000
[1771] 0.924024641 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[1777] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[1783] 0.600841178 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[1789] 0.000000000 0.778156288 0.000000000 0.000000000 0.000000000 0.000000000
[1795] 0.000000000 0.000000000 0.000000000 0.686425553 0.816776181 0.687838282
[1801] 1.000000000 1.000000000 1.000000000 0.753248803 0.000000000 0.000000000
[1807] 0.492079831 0.000000000 0.418347999 0.000000000 0.000000000 0.000000000
[1813] 0.000000000 0.606754427 0.000000000 0.924024641 0.778156288 1.000000000
[1819] 1.000000000 1.000000000 0.615852055 0.193400812 0.164422189 0.436780207
[1825] 0.480718686 0.404831486 1.000000000 1.000000000 1.000000000 1.000000000
[1831] 1.000000000 0.414580102 1.000000000 0.538611011 1.000000000 0.284087674
[1837] 0.131259820 0.069445585 0.058482768 1.000000000 1.000000000 1.000000000
[1843] 0.656889567 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[1849] 0.000000000 0.000000000 0.000000000 0.000000000 0.426860565 0.000000000
[1855] 1.000000000 0.348794248 1.000000000 0.000000000 0.000000000 0.000000000
[1861] 0.000000000 1.000000000 0.349749481 1.000000000 0.285785611 1.000000000
[1867] 1.000000000 0.000000000 0.472365071 1.000000000 0.000000000 1.000000000
[1873] 1.000000000 0.459964024 0.000000000 0.000000000 0.000000000 0.457289503
[1879] 0.000000000 1.000000000 1.000000000 0.196874836 1.000000000 1.000000000
[1885] 1.000000000 0.000000000 0.679914125 1.000000000 0.000000000 1.000000000
[1891] 1.000000000 0.662064271 0.000000000 0.000000000 0.000000000 0.268972260
[1897] 0.000000000 1.000000000 1.000000000 0.115799442 0.384666519 1.000000000
[1903] 0.499748111 0.000000000 0.536881149 0.000000000 1.000000000 1.000000000
[1909] 0.000000000 0.000000000 0.617309354 0.000000000 0.000000000 0.000000000
[1915] 0.000000000 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[1921] 0.414281593 0.587712836 0.000000000 0.000000000 0.000000000 0.000000000
[1927] 0.174674664 1.000000000 0.201629133 0.699181181 0.436427117 0.141119050
[1933] 1.000000000 1.000000000 0.603498161 0.148456041 1.000000000 1.000000000
[1939] 1.000000000 0.778868509 0.633323531 0.100149003 1.000000000 1.000000000
[1945] 0.654269472 0.000000000 0.100552835 1.000000000 1.000000000 1.000000000
[1951] 0.598450013 0.486619334 0.083922894 1.000000000 1.000000000 0.634161590
[1957] 0.081580861 1.000000000 1.000000000 1.000000000 0.526995608 0.428517414
[1963] 0.000000000 0.457206114 0.000000000 0.168408962 0.000000000 1.000000000
[1969] 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000 0.000000000
[1975] 0.856975773 0.000000000 0.000000000 1.000000000 1.000000000 0.000000000
[1981] 0.000000000 0.708337510 0.000000000 0.000000000 1.000000000 1.000000000
[1987] 0.080305088 1.000000000 1.000000000 0.205187522 0.000000000 0.000000000
[1993] 0.000000000 0.699181181 0.000000000 0.351852614 1.000000000 1.000000000
[1999] 0.899018577 0.000000000 0.000000000 0.000000000 0.225935224 1.000000000
[2005] 0.000000000 0.851118805 1.000000000 1.000000000 1.000000000 1.000000000
[2011] 0.160020715 0.121600350 0.413454000 0.000000000 0.000000000 0.000000000
[2017] 0.436427117 0.000000000 0.196976556 1.000000000 0.742028836 1.000000000
[2023] 1.000000000 0.000000000 1.000000000 1.000000000 0.281489154 0.000000000
[2029] 0.213904679 0.000000000 0.460742367 0.000000000 0.000000000 0.333471498
[2035] 1.000000000 0.208627607 1.000000000 1.000000000 0.000000000 0.777096702
[2041] 0.000000000 1.000000000 1.000000000 0.000000000 0.288433228 0.000000000
[2047] 1.000000000 1.000000000 0.423215455 0.000000000 0.000000000 0.000000000
[2053] 0.000000000 0.000000000 0.680965928 0.000000000 1.000000000 0.995510815
[2059] 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000 0.415908129
[2065] 0.480702184 0.000000000 0.000000000 0.646933053 0.000000000 1.000000000
[2071] 1.000000000 0.593421812 0.024587357 1.000000000 1.000000000 0.662213106
[2077] 1.000000000 0.486763708 0.000000000 0.000000000 0.000000000 0.000000000
[2083] 1.000000000 0.038664513 0.000000000 0.000000000 0.000000000 0.000000000
[2089] 0.000000000 0.000000000 0.000000000 0.097476341 1.000000000 1.000000000
[2095] 0.141142527 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2101] 1.000000000 0.809545538 1.000000000 0.000000000 0.656884926 0.000000000
[2107] 0.019703774 0.000000000 1.000000000 0.375870729 1.000000000 0.000000000
[2113] 0.131402823 0.000000000 0.000000000 0.000000000 0.488907990 0.000000000
[2119] 1.000000000 1.000000000 1.000000000 1.000000000 0.358322649 0.000000000
[2125] 0.000000000 0.267579131 0.000000000 0.000000000 0.611316662 1.000000000
[2131] 1.000000000 0.419020551 0.000000000 0.000000000 0.000000000 0.000000000
[2137] 0.264161755 0.000000000 1.000000000 1.000000000 1.000000000 0.263388402
[2143] 1.000000000 1.000000000 1.000000000 1.000000000 0.144575614 0.359798352
[2149] 0.564586672 0.000000000 0.565896912 1.000000000 0.510443639 0.000000000
[2155] 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000 0.556969931
[2161] 0.924777920 0.000000000 0.000000000 0.908745081 0.000000000 1.000000000
[2167] 1.000000000 1.000000000 1.000000000 0.394016001 1.000000000 0.169435766
[2173] 0.084524113 1.000000000 0.076241441 1.000000000 1.000000000 1.000000000
[2179] 1.000000000 0.669184784 0.719784847 1.000000000 1.000000000 1.000000000
[2185] 0.079689535 0.471208005 0.213134744 0.198600787 1.000000000 1.000000000
[2191] 1.000000000 1.000000000 0.152499777 0.781261036 0.000000000 0.357888066
[2197] 1.000000000 1.000000000 0.000000000 0.488493270 0.000000000 0.395881651
[2203] 1.000000000 0.368006414 0.000000000 0.502259860 0.000000000 0.000000000
[2209] 0.725281742 0.000000000 1.000000000 1.000000000 1.000000000 0.414708452
[2215] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000
[2221] 0.769633785 0.889534528 0.000000000 0.995479762 0.325597545 1.000000000
[2227] 1.000000000 1.000000000 1.000000000 1.000000000 0.620307905 1.000000000
[2233] 1.000000000 0.531495479 0.000000000 0.000000000 0.014693844 0.000000000
[2239] 1.000000000 1.000000000 0.022901250 0.000000000 0.000000000 0.000000000
[2245] 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2251] 0.528541775 1.000000000 1.000000000 0.452867941 0.000000000 1.000000000
[2257] 0.800049282 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2263] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2269] 0.654936045 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2275] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.503124930
[2281] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2287] 1.000000000 1.000000000 1.000000000 0.000000000 0.000000000 0.222881060
[2293] 0.701401170 0.412924071 1.000000000 1.000000000 1.000000000 0.904371296
[2299] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.259411637
[2305] 0.745477437 0.000000000 0.693812966 0.000000000 0.000000000 0.000000000
[2311] 0.000000000 0.244092870 0.079836921 0.746948029 1.000000000 1.000000000
[2317] 1.000000000 1.000000000 1.000000000 0.843712161 1.000000000 0.722913888
[2323] 0.418532977 0.136892095 0.895012208 1.000000000 1.000000000 1.000000000
[2329] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000
[2335] 0.000000000 0.110568539 0.569990477 0.204846527 1.000000000 1.000000000
[2341] 1.000000000 1.000000000 0.802127434 1.000000000 0.000000000 0.000000000
[2347] 0.000000000 0.000000000 0.000000000 0.000000000 0.669184784 0.000000000
[2353] 0.000000000 0.000000000 0.000000000 0.747307903 1.000000000 0.000000000
[2359] 0.504217721 0.000000000 0.931079431 0.000000000 0.000000000 0.000000000
[2365] 0.931079431 1.000000000 0.043531329 0.000000000 0.310359810 0.000000000
[2371] 0.313512384 0.000000000 0.000000000 0.000000000 0.151448861 0.000000000
[2377] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[2383] 0.488493270 0.000000000 0.310359810 0.967783561 0.000000000 0.000000000
[2389] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[2395] 0.000000000 0.155920294 0.000000000 0.000000000 0.000000000 0.000000000
[2401] 0.000000000 0.967783561 1.000000000 1.000000000 0.000000000 0.105085189
[2407] 0.000000000 0.000000000 0.483612198 1.000000000 1.000000000 0.423157985
[2413] 1.000000000 1.000000000 0.000000000 0.119753468 0.000000000 0.151448861
[2419] 0.155920294 0.000000000 0.163430738 0.159050504 0.154715204 0.000000000
[2425] 0.000000000 0.000000000 0.745477437 0.000000000 1.000000000 0.000000000
[2431] 0.210751527 0.160944702 0.000000000 0.000000000 0.000000000 0.163430738
[2437] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.159050504
[2443] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.154715204
[2449] 0.000000000 0.000000000 0.588281095 1.000000000 0.000000000 0.000000000
[2455] 0.000000000 0.000000000 0.000000000 0.267067069 0.203951215 0.000000000
[2461] 0.000000000 1.000000000 0.500260626 0.114600521 0.000000000 1.000000000
[2467] 0.115728687 1.000000000 1.000000000 0.473623087 0.000000000 0.000000000
[2473] 1.000000000 0.319241765 0.776107331 0.000000000 0.000000000 0.000000000
[2479] 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000 0.248095180
[2485] 0.708770457 0.000000000 0.000000000 0.319241765 0.000000000 0.918967489
[2491] 0.321699718 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[2497] 0.000000000 0.696251778 0.000000000 0.000000000 1.000000000 0.835953568
[2503] 0.000000000 1.000000000 0.690212815 1.000000000 0.828702897 1.000000000
[2509] 0.847872781 0.000000000 0.000000000 0.792117839 1.000000000 0.847872781
[2515] 0.862878948 0.000000000 0.000000000 0.000000000 0.000000000 0.651456367
[2521] 0.000000000 0.000000000 0.000000000 0.000000000 0.862878948 1.000000000
[2527] 1.000000000 1.000000000 1.000000000 0.000000000 0.676228644 1.000000000
[2533] 1.000000000 1.000000000 1.000000000 0.551111196 1.000000000 1.000000000
[2539] 1.000000000 1.000000000 0.392648271 1.000000000 1.000000000 1.000000000
[2545] 1.000000000 0.232555464 1.000000000 1.000000000 1.000000000 1.000000000
[2551] 0.000000000 0.651456367 0.000000000 0.584605391 0.000000000 0.000000000
[2557] 0.000000000 0.584605391 0.500233442 0.239223004 0.000000000 0.000000000
[2563] 0.000000000 0.000000000 0.313512384 0.000000000 0.724976237 0.000000000
[2569] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[2575] 0.724976237 0.129615396 0.000000000 0.805397956 0.180074355 1.000000000
[2581] 0.000000000 0.767865675 0.000000000 0.000000000 0.392960840 0.000000000
[2587] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2593] 0.186617195 0.968736886 0.000000000 0.244097214 0.000000000 0.962278676
[2599] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.390484101
[2605] 1.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.206291164
[2611] 1.000000000 1.000000000 0.065491184 0.000000000 1.000000000 0.000000000
[2617] 0.000000000 0.000000000 1.000000000 0.961599636 0.000000000 0.000000000
[2623] 0.000000000 0.962278676 1.000000000 1.000000000 1.000000000 1.000000000
[2629] 0.338681365 0.000000000 0.000000000 1.000000000 1.000000000 0.421235253
[2635] 0.000000000 0.000000000 0.778782824 1.000000000 1.000000000 1.000000000
[2641] 1.000000000 0.037424519 1.000000000 1.000000000 1.000000000 0.430715935
[2647] 0.569739485 1.000000000 1.000000000 1.000000000 0.000000000 1.000000000
[2653] 1.000000000 1.000000000 0.275981524 0.365060957 1.000000000 1.000000000
[2659] 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000 1.000000000
[2665] 0.467173931 0.000000000 0.000000000 1.000000000 1.000000000 1.000000000
[2671] 0.908892888 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2677] 0.180888953 0.000000000 0.992959388 1.000000000 0.833892301 0.000000000
[2683] 0.805397956 0.000000000 0.000000000 0.000000000 0.000000000 0.487452716
[2689] 0.561277650 0.000000000 0.000000000 1.000000000 0.710732054 0.000000000
[2695] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.073351485
[2701] 1.000000000 1.000000000 0.211123941 0.081488375 1.000000000 0.311395404
[2707] 0.000000000 0.000000000 0.710732054 0.000000000 1.000000000 1.000000000
[2713] 1.000000000 1.000000000 0.559643315 0.190526460 0.630198215 1.000000000
[2719] 1.000000000 1.000000000 1.000000000 0.831909440 0.157299344 0.000000000
[2725] 1.000000000 1.000000000 1.000000000 1.000000000 0.171329018 0.035031068
[2731] 1.000000000 0.461786307 1.000000000 1.000000000 1.000000000 0.695057166
[2737] 0.000000000 0.293237933 0.000000000 0.000000000 0.000000000 0.000000000
[2743] 0.439058675 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2749] 0.078437889 0.077351025 0.165537392 1.000000000 1.000000000 0.664953686
[2755] 1.000000000 1.000000000 0.000000000 0.226956236 0.000000000 0.000000000
[2761] 0.739877706 0.000000000 1.000000000 1.000000000 0.388742031 0.231652553
[2767] 0.306423783 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2773] 1.000000000 0.012980070 0.017169689 1.000000000 1.000000000 1.000000000
[2779] 1.000000000 1.000000000 1.000000000 0.000000000 0.000000000 0.902808530
[2785] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2791] 0.239413911 1.000000000 1.000000000 1.000000000 1.000000000 0.249841426
[2797] 0.988133689 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2803] 0.560011276 0.336925994 1.000000000 1.000000000 1.000000000 1.000000000
[2809] 1.000000000 0.000000000 0.880526577 1.000000000 1.000000000 1.000000000
[2815] 1.000000000 0.000000000 0.000000000 0.326863982 1.000000000 1.000000000
[2821] 0.000000000 0.000000000 0.000000000 0.293237933 0.000000000 0.000000000
[2827] 1.000000000 1.000000000 0.658873157 0.182329041 1.000000000 1.000000000
[2833] 1.000000000 1.000000000 0.167613104 0.000000000 0.051519155 1.000000000
[2839] 0.000000000 0.262597827 1.000000000 1.000000000 0.735750956 0.236143062
[2845] 0.103812745 1.000000000 1.000000000 0.337349989 0.515021459 0.000000000
[2851] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.735750956
[2857] 0.000000000 0.000000000 0.000000000 0.809148775 0.000000000 0.000000000
[2863] 0.000000000 0.275711642 0.000000000 0.000000000 0.000000000 0.000000000
[2869] 0.248095180 0.000000000 0.000000000 0.000000000 0.000000000 0.809148775
[2875] 0.000000000 0.000000000 0.087425098 0.000000000 0.000000000 1.000000000
[2881] 0.499301901 1.000000000 1.000000000 0.144866137 1.000000000 0.279946761
[2887] 1.000000000 0.761339846 0.000000000 0.000000000 0.109255333 0.580260974
[2893] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2899] 0.122213781 0.649083987 1.000000000 1.000000000 1.000000000 1.000000000
[2905] 1.000000000 1.000000000 0.275711642 0.000000000 1.000000000 1.000000000
[2911] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.159722818
[2917] 0.848296508 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2923] 1.000000000 0.216770620 1.000000000 1.000000000 1.000000000 1.000000000
[2929] 1.000000000 1.000000000 1.000000000 0.203371034 1.000000000 1.000000000
[2935] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[2941] 1.000000000 0.971359743 0.000000000 0.468562008 0.000000000 1.000000000
[2947] 1.000000000 1.000000000 0.037808288 0.000000000 0.491303921 0.000000000
[2953] 0.000000000 0.007369269 1.000000000 1.000000000 1.000000000 0.162917832
[2959] 0.000000000 0.000000000 0.458572162 0.031754553 0.000000000 0.648632580
[2965] 0.000000000 0.000000000 1.000000000 1.000000000 0.504892607 0.601492146
[2971] 0.000000000 0.434949592 1.000000000 1.000000000 1.000000000 0.462647410
[2977] 1.000000000 0.009891586 0.366023279 0.401130463 0.000000000 0.000000000
[2983] 0.000000000 0.000000000 0.000000000 0.511898968 1.000000000 1.000000000
[2989] 1.000000000 0.000000000 0.171111816 0.951725564 0.040566567 0.034526363
[2995] 0.000000000 0.000000000 0.000000000 0.153820473 1.000000000 1.000000000
[3001] 0.000000000 0.166927071 0.000000000 0.495251092 0.000000000 0.421510130
[3007] 0.000000000 0.000000000 0.000000000 0.424810201 1.000000000 1.000000000
[3013] 1.000000000 0.142000765 1.000000000 0.079955537 0.068050469 0.014650054
[3019] 0.034871650 0.000000000 0.099494503 1.000000000 0.152730990 1.000000000
[3025] 0.000000000 0.000000000 0.491303921 0.000000000 0.000000000 0.000000000
[3031] 1.000000000 0.754185731 0.000000000 0.233295786 0.000000000 0.000000000
[3037] 0.000000000 0.000000000 0.016927951 0.000000000 0.000000000 0.754185731
[3043] 1.000000000 0.000000000 0.626833899 0.044769142 1.000000000 0.023363745
[3049] 0.730386981 1.000000000 0.647258501 0.000000000 0.061789807 1.000000000
[3055] 0.000000000 1.000000000 0.165463817 0.000000000 0.000000000 0.000000000
[3061] 0.000000000 0.647258501 1.000000000 0.000000000 0.000000000 0.639707151
[3067] 1.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[3073] 0.539387256 0.000000000 0.000000000 0.000000000 0.366023279 0.000000000
[3079] 0.000000000 0.000000000 0.000000000 0.000000000 0.665503268 0.000000000
[3085] 0.000000000 0.000000000 0.412964515 0.039167881 1.000000000 0.000000000
[3091] 0.000000000 0.000000000 0.446043593 0.000000000 0.000000000 0.000000000
[3097] 1.000000000 0.000000000 0.015665609 0.000000000 0.000000000 0.000000000
[3103] 0.665503268 0.247586036 0.000000000 0.347501183 1.000000000 1.000000000
[3109] 0.136573609 0.000000000 0.000000000 0.495251092 0.000000000 0.000000000
[3115] 1.000000000 1.000000000 0.000000000 0.343983191 0.245039235 1.000000000
[3121] 1.000000000 0.695227648 0.000000000 0.000000000 0.000000000 0.000000000
[3127] 0.000000000 0.000000000 0.421510130 0.000000000 0.000000000 0.000000000
[3133] 0.000000000 0.000000000 0.000000000 0.446043593 1.000000000 0.836711167
[3139] 0.000000000 1.000000000 0.000000000 1.000000000 0.000000000 0.004143121
[3145] 0.475964035 0.186912090 1.000000000 0.350619166 1.000000000 1.000000000
[3151] 0.191861676 0.167484778 0.000000000 0.836711167 0.000000000 1.000000000
[3157] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[3163] 0.000000000 0.096097356 0.780213964 1.000000000 1.000000000 1.000000000
[3169] 0.263129386 0.000000000 0.599512848 1.000000000 0.005719270 1.000000000
[3175] 1.000000000 0.010728497 0.123740081 0.323120337 0.000000000 0.000000000
[3181] 0.000000000 0.060107532 1.000000000 0.025930001 0.269477214 0.000000000
[3187] 0.000000000 0.000000000 0.000000000 0.000000000 0.399823565 1.000000000
[3193] 1.000000000 0.750009297 0.776477024 0.000000000 0.530985982 0.000000000
[3199] 0.000000000 0.000000000 0.000000000 0.269477214 1.000000000 1.000000000
[3205] 0.251360226 0.034133031 0.361558352 0.000000000 0.000000000 0.247586036
[3211] 0.749288176 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[3217] 0.000000000 0.000000000 0.749288176 1.000000000 0.279485689 0.189978389
[3223] 1.000000000 1.000000000 1.000000000 0.000000000 0.000000000 0.825836217
[3229] 1.000000000 1.000000000 0.000000000 0.000000000 0.169204877 1.000000000
[3235] 0.120129397 0.000000000 0.574254458 1.000000000 0.459221010 0.322058602
[3241] 1.000000000 1.000000000 1.000000000 0.263021001 0.349332774 0.000000000
[3247] 0.000000000 0.000000000 0.000000000 0.000000000 0.479769711 0.000000000
[3253] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[3259] 0.000000000 0.000000000 0.769414903 0.000000000 0.000000000 0.000000000
[3265] 0.000000000 0.000000000 0.000000000 0.000000000 0.565411871 0.470588235
[3271] 0.422798342 1.000000000 1.000000000 0.614745409 0.436347188 1.000000000
[3277] 1.000000000 0.272174767 1.000000000 1.000000000 0.769414903 0.550007539
[3283] 1.000000000 1.000000000 0.251760827 1.000000000 1.000000000 0.748452621
[3289] 0.565411871 1.000000000 1.000000000 0.000000000 0.263021001 0.000000000
[3295] 0.000000000 0.389094965 0.000000000 0.000000000 0.000000000 0.000000000
[3301] 0.349332774 0.000000000 1.000000000 1.000000000 0.000000000 0.862842969
[3307] 0.674381313 0.345327092 1.000000000 1.000000000 0.878644047 0.686731128
[3313] 0.000000000 0.000000000 0.218736657 1.000000000 1.000000000 1.000000000
[3319] 1.000000000 0.186063338 0.137803231 1.000000000 1.000000000 1.000000000
[3325] 0.523436349 0.571834493 1.000000000 1.000000000 0.000000000 0.000000000
[3331] 0.000000000 0.000000000 0.695227648 0.000000000 1.000000000 1.000000000
[3337] 0.961192047 0.252974012 0.417090241 0.181971320 1.000000000 1.000000000
[3343] 1.000000000 0.449635690 0.357779597 0.222901008 1.000000000 1.000000000
[3349] 1.000000000 0.491572267 0.000000000 0.000000000 0.000000000 0.479769711
[3355] 0.000000000 0.000000000 0.948064212 1.000000000 1.000000000 0.228384475
[3361] 1.000000000 1.000000000 1.000000000 0.553751878 0.506129877 1.000000000
[3367] 1.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.491572267
[3373] 0.000000000 1.000000000 0.243860143 0.000000000 0.000000000 0.000000000
[3379] 0.000000000 0.323120337 0.000000000 0.000000000 0.000000000 0.000000000
[3385] 0.000000000 0.000000000 0.530985982 0.000000000 0.250127843 0.000000000
[3391] 0.000000000 0.000000000 0.000000000 0.062800168 1.000000000 0.247638613
[3397] 1.000000000 0.000000000 0.000000000 1.000000000 0.211890145 0.000000000
[3403] 0.000000000 1.000000000 1.000000000 1.000000000 0.527914445 0.000000000
[3409] 0.989123097 0.000000000 0.015881190 1.000000000 0.076840611 0.000000000
[3415] 0.579180395 0.000000000 0.000000000 0.095007678 1.000000000 0.000000000
[3421] 0.130697689 0.113049474 1.000000000 1.000000000 0.383928369 0.000000000
[3427] 0.000000000 0.000000000 0.579180395 0.251979944 1.000000000 0.125002710
[3433] 0.000000000 0.513575513 0.000000000 0.000000000 0.000000000 0.000000000
[3439] 0.594640309 0.000000000 0.000000000 1.000000000 1.000000000 1.000000000
[3445] 0.662875998 0.000000000 0.269618798 1.000000000 1.000000000 0.000000000
[3451] 0.740420521 0.000000000 1.000000000 0.000000000 0.661891244 0.000000000
[3457] 0.000000000 0.000000000 0.250127843 0.513575513 0.000000000 1.000000000
[3463] 1.000000000 0.743818335 0.564705882 0.000000000 0.122896147 0.252336769
[3469] 0.664390414 1.000000000 1.000000000 1.000000000 0.905553730 0.000000000
[3475] 0.143273229 0.294176054 0.504936714 1.000000000 1.000000000 1.000000000
[3481] 0.985869208 0.000000000 0.000000000 0.000000000 1.000000000 0.603880566
[3487] 1.000000000 1.000000000 0.254332347 0.323723653 0.000000000 0.000000000
[3493] 0.000000000 0.000000000 0.000000000 0.985869208 0.000000000 0.740948084
[3499] 0.000000000 0.000000000 0.000000000 0.000000000 1.000000000 0.199200542
[3505] 0.000000000 0.000000000 0.126602487 0.000000000 1.000000000 0.034753855
[3511] 0.725654298 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[3517] 0.267067069 0.000000000 0.000000000 0.000000000 0.000000000 0.662875998
[3523] 0.000000000 0.000000000 0.313158939 0.000000000 0.000000000 0.000000000
[3529] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[3535] 0.000000000 0.918967489 0.000000000 0.940281667 0.266560889 1.000000000
[3541] 1.000000000 1.000000000 0.090951990 1.000000000 0.838949506 1.000000000
[3547] 0.000000000 0.341267397 0.000000000 0.321699718 0.000000000 1.000000000
[3553] 1.000000000 0.498703800 1.000000000 0.992967762 0.000000000 0.240667134
[3559] 1.000000000 1.000000000 0.666617288 1.000000000 1.000000000 0.077695257
[3565] 0.000000000 0.940281667 0.000000000 0.500233442 0.000000000 0.000000000
[3571] 0.000000000 0.000000000 0.469199650 0.000000000 0.370065789 0.000000000
[3577] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[3583] 0.000000000 0.105231552 1.000000000 1.000000000 0.385971410 1.000000000
[3589] 1.000000000 0.208580607 0.000000000 0.000000000 0.666617288 0.000000000
[3595] 0.000000000 0.000000000 0.000000000 0.089840008 1.000000000 1.000000000
[3601] 1.000000000 0.354077476 1.000000000 0.223455042 0.279664850 1.000000000
[3607] 1.000000000 1.000000000 0.076385128 1.000000000 0.774136922 1.000000000
[3613] 0.314902971 0.000000000 0.992148213 1.000000000 1.000000000 0.166595067
[3619] 1.000000000 0.310891568 0.000000000 0.239223004 0.000000000 0.000000000
[3625] 0.981718225 0.000000000 0.000000000 1.000000000 0.258720591 0.102053182
[3631] 0.000000000 0.313158939 1.000000000 1.000000000 1.000000000 0.039151826
[3637] 1.000000000 0.608474168 1.000000000 0.247514771 0.066073737 0.981718225
[3643] 1.000000000 1.000000000 0.000000000 0.000000000 0.000000000 0.424156483
[3649] 0.044002792 1.000000000 1.000000000 0.000000000 0.469199650 0.138247742
[3655] 1.000000000 1.000000000 0.000000000 0.162055921 1.000000000 1.000000000
[3661] 1.000000000 1.000000000 0.420925791 1.000000000 0.574370835 0.124117216
[3667] 0.000000000 0.370065789 0.000000000 1.000000000 1.000000000 1.000000000
[3673] 0.494123747 0.130001819 1.000000000 1.000000000 0.679549675 0.545768084
[3679] 0.000000000 0.213445724 1.000000000 1.000000000 1.000000000 1.000000000
[3685] 0.563000182 0.000000000 1.000000000 0.918497715 0.000000000 0.000000000
[3691] 0.235844165 0.157637251 1.000000000 1.000000000 1.000000000 0.000000000
[3697] 0.882832476 1.000000000 1.000000000 0.432229094 0.560415558 0.047023026
[3703] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.140215291
[3709] 0.000000000 0.000000000 0.000000000 0.616429495 0.000000000 0.597664980
[3715] 0.000000000 0.000000000 0.000000000 1.000000000 0.692622736 1.000000000
[3721] 1.000000000 0.760003638 0.000000000 0.000000000 0.804562765 0.000000000
[3727] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[3733] 0.050205070 1.000000000 0.087798133 1.000000000 1.000000000 1.000000000
[3739] 0.509301699 0.000000000 0.000000000 0.569854738 0.045309901 0.000000000
[3745] 0.000000000 0.000000000 0.858357585 0.000000000 1.000000000 1.000000000
[3751] 1.000000000 1.000000000 0.696364970 0.103244531 0.043921993 0.022878664
[3757] 1.000000000 0.290283171 0.874975695 0.345137019 0.742065296 1.000000000
[3763] 1.000000000 1.000000000 1.000000000 0.785669390 0.144140975 0.169712023
[3769] 0.088401824 0.128842306 1.000000000 1.000000000 1.000000000 1.000000000
[3775] 0.314756617 0.000000000 0.359792759 0.000000000 0.833017731 0.000000000
[3781] 0.000000000 0.433913199 0.000000000 0.000000000 0.246480817 1.000000000
[3787] 1.000000000 1.000000000 0.120486766 0.270828003 1.000000000 0.276224444
[3793] 0.000000000 0.000000000 0.576450092 0.068160744 0.000000000 0.143523796
[3799] 0.496999475 0.000000000 0.000000000 0.000000000 0.000000000 1.000000000
[3805] 1.000000000 1.000000000 1.000000000 0.000000000 0.000000000 0.000000000
[3811] 0.515021459 0.000000000 1.000000000 0.543800075 0.035080745 0.074838345
[3817] 0.000000000 0.000000000 0.000000000 0.000000000 0.388742031 0.024240343
[3823] 1.000000000 0.025594857 0.745341615 1.000000000 0.000000000 0.543800075
[3829] 0.000000000 0.000000000 0.000000000 0.972405299 0.293782895 1.000000000
[3835] 1.000000000 1.000000000 0.824183426 0.000000000 0.000000000 1.000000000
[3841] 1.000000000 0.833985831 0.144449013 0.000000000 1.000000000 0.922289315
[3847] 0.000000000 1.000000000 1.000000000 1.000000000 0.000000000 0.107050453
[3853] 0.000000000 1.000000000 1.000000000 0.595078300 0.000000000 0.000000000
[3859] 0.000000000 0.705765736 1.000000000 0.495821727 0.000000000 0.000000000
[3865] 0.745341615 0.000000000 0.000000000 1.000000000 1.000000000 0.968347522
[3871] 1.000000000 0.130689686 1.000000000 1.000000000 0.334562072 0.000000000
[3877] 0.000000000 0.000000000 0.000000000 0.804562765 0.000000000 1.000000000
[3883] 1.000000000 0.800073819 0.018839420 0.000000000 0.232536518 1.000000000
[3889] 1.000000000 1.000000000 0.379550605 0.324625896 0.029876097 1.000000000
[3895] 1.000000000 1.000000000 0.507345232 0.196611892 0.000000000 0.000000000
[3901] 0.000000000 0.000000000 0.785669390 0.000000000 0.000000000 0.000000000
[3907] 0.000000000 0.000000000 0.000000000 0.898418453 1.000000000 1.000000000
[3913] 0.196274959 0.508216161 0.000000000 0.000000000 0.000000000 0.000000000
[3919] 0.000000000 1.000000000 1.000000000 0.921741978 1.000000000 0.124399729
[3925] 1.000000000 1.000000000 0.345342995 0.000000000 0.000000000 0.389417471
[3931] 1.000000000 0.000000000 0.276587992 0.000000000 0.972405299 0.000000000
[3937] 0.000000000 0.000000000 0.507345232 0.000000000 0.000000000 0.621993697
[3943] 0.000000000 0.463448556 1.000000000 0.000000000 0.383380072 0.000000000
[3949] 0.000000000 0.000000000 0.707677189 1.000000000 0.199200542 0.000000000
[3955] 0.000000000 1.000000000 0.734716083 0.000000000 0.000000000 0.004419123
[3961] 0.405958630 1.000000000 0.143477510 1.000000000 1.000000000 0.008137856
[3967] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.310891568
[3973] 0.000000000 0.000000000 0.874975695 0.000000000 0.224701147 0.000000000
[3979] 0.000000000 0.000000000 0.000000000 0.070305052 1.000000000 0.413789298
[3985] 0.000000000 0.000000000 0.000000000 0.000000000 0.305328131 1.000000000
[3991] 0.608099891 0.000000000 0.691987098 0.000000000 0.000000000 0.000000000
[3997] 0.000000000 0.000000000 0.000000000 0.359792759 0.000000000 0.000000000
[4003] 1.000000000 0.516047080 0.000000000 0.815424202 0.000000000 0.000000000
[4009] 0.000000000 0.000000000 0.608099891 0.000000000 1.000000000 0.000000000
[4015] 0.971796311 0.000000000 0.733503439 0.000000000 0.000000000 0.586586668
[4021] 1.000000000 0.937416318 0.000000000 0.760404873 0.000000000 0.000000000
[4027] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.389772625
[4033] 1.000000000 0.000000000 0.000000000 1.000000000 1.000000000 0.823167477
[4039] 0.055556979 0.707224693 0.000000000 0.000000000 0.000000000 0.000000000
[4045] 0.720532179 1.000000000 1.000000000 1.000000000 0.000000000 0.460466140
[4051] 0.265579141 1.000000000 0.000000000 1.000000000 0.000000000 0.172179299
[4057] 1.000000000 0.000000000 0.000000000 0.815424202 0.000000000 0.746565797
[4063] 0.000000000 0.542122953 0.000000000 0.000000000 0.000000000 0.000000000
[4069] 0.072596710 1.000000000 1.000000000 0.524063720 0.046393940 0.000000000
[4075] 0.599133813 1.000000000 0.357042548 0.000000000 0.000000000 0.000000000
[4081] 0.345137019 0.000000000 0.000000000 0.971796311 0.000000000 1.000000000
[4087] 0.000000000 0.368766732 0.359639351 0.223102838 1.000000000 1.000000000
[4093] 1.000000000 0.000000000 0.000000000 0.438692993 1.000000000 0.261436469
[4099] 1.000000000 0.104516744 0.000000000 0.000000000 0.000000000 0.000000000
[4105] 0.474864394 1.000000000 0.622639160 0.000000000 0.000000000 1.000000000
[4111] 1.000000000 0.995141263 0.000000000 0.000000000 0.000000000 0.760404873
[4117] 0.000000000 1.000000000 0.388831237 1.000000000 1.000000000 0.234928918
[4123] 0.000000000 0.746565797 1.000000000 0.000000000 0.517088062 1.000000000
[4129] 0.000000000 0.000000000 0.000000000 0.413789298 1.000000000 0.680170035
[4135] 0.804088343 0.266427258 0.000000000 0.000000000 0.000000000 0.197156808
[4141] 1.000000000 1.000000000 0.383121292 0.559172921 0.000000000 0.572053143
[4147] 1.000000000 0.000000000 0.167466077 0.000000000 0.804088343 0.000000000
[4153] 0.000000000 0.000000000 1.000000000 1.000000000 0.308629311 0.000000000
[4159] 0.000000000 0.559172921 0.000000000 0.000000000 0.000000000 0.489918948
[4165] 1.000000000 0.591276196 0.000000000 0.469410713 1.000000000 0.580903088
[4171] 0.000000000 0.127794131 0.000000000 1.000000000 1.000000000 0.252069536
[4177] 0.000000000 0.216132726 0.222898914 0.000000000 0.622639160 0.000000000
[4183] 1.000000000 1.000000000 0.000000000 0.000000000 0.000000000 0.345800066
[4189] 0.000000000 0.000000000 0.363868003 0.389163311 1.000000000 1.000000000
[4195] 0.334696042 0.375939850 0.000000000 0.000000000 0.000000000 0.000000000
[4201] 0.000000000 0.000000000 0.000000000 0.000000000 0.369169676 1.000000000
[4207] 1.000000000 0.189263541 0.088240761 1.000000000 1.000000000 0.306061738
[4213] 1.000000000 1.000000000 1.000000000 0.169690573 0.048446239 1.000000000
[4219] 1.000000000 0.273476955 1.000000000 1.000000000 1.000000000 0.374005768
[4225] 0.000000000 0.995279720 0.000000000 0.000000000 1.000000000 1.000000000
[4231] 1.000000000 0.000000000 0.074972301 1.000000000 1.000000000 0.515850009
[4237] 0.331734805 0.772989510 1.000000000 1.000000000 1.000000000 0.252805839
[4243] 0.614158398 0.381806719 1.000000000 0.000000000 0.614158398 0.000000000
[4249] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.576450092
[4255] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[4261] 0.000000000 0.707224693 0.000000000 0.000000000 0.000000000 0.000000000
[4267] 1.000000000 1.000000000 0.520926479 0.000000000 0.000000000 0.784650220
[4273] 1.000000000 0.000000000 0.000000000 0.705141263 0.507221550 1.000000000
[4279] 1.000000000 0.726333629 0.000000000 0.000000000 0.000000000 0.508216161
[4285] 0.000000000 1.000000000 1.000000000 0.851340313 0.929117480 0.000000000
[4291] 0.000000000 0.000000000 0.388446553 1.000000000 0.844919917 1.000000000
[4297] 1.000000000 0.560102302 0.259244645 0.000000000 0.000000000 0.139938982
[4303] 0.000000000 0.048472528 1.000000000 0.404714757 0.000000000 0.000000000
[4309] 0.208395543 1.000000000 1.000000000 0.008619159 0.000000000 0.542122953
[4315] 0.000000000 1.000000000 1.000000000 0.000000000 0.898850021 0.000000000
[4321] 0.484373593 0.000000000 0.286285660 0.183885172 1.000000000 1.000000000
[4327] 0.000000000 0.000000000 0.726333629 0.000000000 0.000000000 0.433663366
[4333] 1.000000000 0.000000000 0.124233502 1.000000000 1.000000000 1.000000000
[4339] 1.000000000 0.000000000 0.095339067 0.000000000 0.752569543 1.000000000
[4345] 0.000000000 0.197544615 0.000000000 0.000000000 0.789030720 0.000000000
[4351] 0.910596272 1.000000000 0.000000000 1.000000000 1.000000000 0.663930689
[4357] 0.014359541 0.000000000 0.674735774 1.000000000 0.000000000 1.000000000
[4363] 1.000000000 1.000000000 0.270296659 0.331459971 0.000000000 0.279988091
[4369] 1.000000000 1.000000000 0.000000000 0.239276256 1.000000000 1.000000000
[4375] 1.000000000 1.000000000 0.443804489 0.000000000 0.000000000 0.000000000
[4381] 0.000000000 0.184995421 1.000000000 0.910242358 1.000000000 1.000000000
[4387] 0.422176417 0.000000000 0.621993697 0.000000000 0.000000000 0.000000000
[4393] 0.789030720 0.359704603 1.000000000 1.000000000 1.000000000 1.000000000
[4399] 1.000000000 0.757128704 0.521580583 0.000000000 0.000000000 0.000000000
[4405] 0.323948583 0.000000000 0.000000000 1.000000000 1.000000000 0.777317224
[4411] 1.000000000 1.000000000 0.810591732 0.344153515 0.029256373 1.000000000
[4417] 0.149258760 1.000000000 1.000000000 0.000000000 1.000000000 0.499981984
[4423] 0.142382203 0.000000000 0.778100647 1.000000000 1.000000000 1.000000000
[4429] 1.000000000 0.158767901 1.000000000 0.908550427 0.000000000 0.258732146
[4435] 0.576211861 1.000000000 1.000000000 1.000000000 1.000000000 0.103701702
[4441] 1.000000000 1.000000000 0.127581121 0.000000000 0.000000000 0.290100148
[4447] 0.131611706 0.000000000 0.000000000 0.705141263 1.000000000 1.000000000
[4453] 0.000000000 0.000000000 0.000000000 0.536717436 0.000000000 0.000000000
[4459] 0.000000000 0.000000000 1.000000000 0.289282254 0.000000000 0.000000000
[4465] 0.810591732 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[4471] 0.000000000 0.759076404 0.000000000 1.000000000 1.000000000 1.000000000
[4477] 0.000000000 1.000000000 1.000000000 1.000000000 0.971759328 0.000000000
[4483] 0.461746840 0.000000000 0.000000000 0.000000000 0.169774289 1.000000000
[4489] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.176972172
[4495] 0.803416796 0.000000000 0.000000000 0.787840746 1.000000000 1.000000000
[4501] 1.000000000 1.000000000 1.000000000 0.135230258 0.922828544 0.000000000
[4507] 0.288854003 1.000000000 1.000000000 0.128631633 1.000000000 0.000000000
[4513] 0.000000000 0.203951215 0.062597416 1.000000000 1.000000000 0.074147057
[4519] 0.539387256 0.000000000 0.310019130 1.000000000 1.000000000 1.000000000
[4525] 1.000000000 1.000000000 0.053213758 0.688202659 0.165827393 0.000000000
[4531] 0.986199690 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000
[4537] 1.000000000 0.239658914 0.145578644 0.938096782 1.000000000 1.000000000
[4543] 1.000000000 1.000000000 1.000000000 0.210394792 0.624800411 0.000000000
[4549] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.461746840
[4555] 0.000000000 0.000000000 0.000000000 0.000000000 0.682542090 0.000000000
[4561] 0.000000000 0.806149535 0.000000000 1.000000000 1.000000000 0.986431092
[4567] 0.176673777 0.000000000 0.000000000 0.000000000 0.000000000 0.443804489
[4573] 0.000000000 1.000000000 1.000000000 1.000000000 0.321621324 0.206711025
[4579] 0.406584086 1.000000000 1.000000000 1.000000000 0.280052869 0.050921652
[4585] 0.287979802 1.000000000 1.000000000 1.000000000 0.495649301 0.000000000
[4591] 0.000000000 0.358154787 0.000000000 0.218923823 1.000000000 1.000000000
[4597] 1.000000000 0.070470316 0.000000000 0.000000000 0.000000000 0.000000000
[4603] 0.986431092 0.000000000 0.000000000 0.000000000 0.000000000 0.495649301
[4609] 0.000000000 1.000000000 1.000000000 1.000000000 0.875917292 1.000000000
[4615] 1.000000000 1.000000000 1.000000000 0.201321306 0.276616367 1.000000000
[4621] 1.000000000 0.112919925 1.000000000 1.000000000 0.470588235 0.000000000
[4627] 0.000000000 0.389094965 1.000000000 1.000000000 0.102315910 0.000000000
[4633] 0.000000000 0.018316092 0.037015901 1.000000000 0.101024165 1.000000000
[4639] 0.048692141 0.244504644 0.000000000 0.022688560 1.000000000 0.064441661
[4645] 0.000000000 0.314109813 0.000000000 0.000000000 0.000000000 0.077580491
[4651] 1.000000000 0.000000000 0.693620235 1.000000000 0.000000000 0.000000000
[4657] 0.000000000 0.756975532 1.000000000 0.295438227 0.678293113 0.000000000
[4663] 0.502361097 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[4669] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[4675] 0.197338566 1.000000000 0.098542381 0.000000000 0.000000000 0.601127229
[4681] 0.563855666 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[4687] 1.000000000 1.000000000 1.000000000 1.000000000 0.348119382 0.000000000
[4693] 0.000000000 0.678293113 0.000000000 0.000000000 0.091675318 1.000000000
[4699] 0.000000000 0.455336845 0.000000000 0.000000000 0.000000000 0.000000000
[4705] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.502361097
[4711] 0.000000000 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[4717] 1.000000000 1.000000000 0.000000000 1.000000000 1.000000000 0.069715561
[4723] 0.077909834 0.000000000 0.254071916 0.618652822 1.000000000 1.000000000
[4729] 1.000000000 1.000000000 1.000000000 0.071024945 1.000000000 1.000000000
[4735] 1.000000000 0.291640264 0.027298512 0.301025933 0.732983582 1.000000000
[4741] 1.000000000 1.000000000 1.000000000 1.000000000 0.149206290 1.000000000
[4747] 1.000000000 1.000000000 0.356644978 0.057347593 0.282326937 0.687452430
[4753] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.118071304
[4759] 1.000000000 1.000000000 1.000000000 0.330757461 0.045380829 0.263907030
[4765] 0.642600848 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[4771] 0.087401019 1.000000000 1.000000000 1.000000000 0.305256325 0.033592673
[4777] 0.170479029 0.415108187 1.000000000 1.000000000 1.000000000 1.000000000
[4783] 1.000000000 0.366574966 1.000000000 1.000000000 1.000000000 0.537378483
[4789] 0.140893471 0.000000000 0.000000000 0.693620235 0.000000000 0.401137448
[4795] 0.000000000 0.000000000 0.000000000 0.766712077 1.000000000 0.494474159
[4801] 0.622355170 0.582485303 1.000000000 1.000000000 1.000000000 1.000000000
[4807] 0.341010010 0.000000000 0.000000000 0.000000000 0.314109813 0.633820671
[4813] 0.000000000 1.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[4819] 0.000000000 0.000000000 0.000000000 0.000000000 0.836462322 0.000000000
[4825] 0.000000000 0.056275606 0.137028379 1.000000000 1.000000000 1.000000000
[4831] 1.000000000 1.000000000 1.000000000 0.556730733 1.000000000 1.000000000
[4837] 0.695485526 0.213980039 0.000000000 0.008372685 0.020387083 1.000000000
[4843] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.636492063
[4849] 1.000000000 1.000000000 0.629167117 0.244636389 0.000000000 0.000000000
[4855] 0.445079013 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[4861] 0.836462322 1.000000000 1.000000000 0.462899711 0.000000000 0.000000000
[4867] 0.321495167 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[4873] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[4879] 0.695485526 0.000000000 0.000000000 0.000000000 0.321240416 0.000000000
[4885] 0.243860143 0.000000000 0.998082787 0.000000000 0.912223799 0.000000000
[4891] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[4897] 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.215176458
[4903] 0.594640309 0.000000000 0.291662346 0.231454098 0.000000000 0.000000000
[4909] 0.000000000 0.661891244 0.000000000 0.000000000 0.851482526 0.000000000
[4915] 0.684837693 0.000000000 0.000000000 0.291662346 0.000000000 0.000000000
[4921] 0.851482526 1.000000000 0.000000000 0.868474380 0.000000000 0.000000000
[4927] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.822664573
[4933] 1.000000000 0.839081347 0.000000000 0.684837693 0.000000000 0.000000000
[4939] 0.740948084 0.857044909 0.765670728 0.000000000 0.000000000 0.000000000
[4945] 0.857044909 0.000000000 1.000000000 0.560803569 0.000000000 1.000000000
[4951] 0.000000000 0.725654298 0.000000000 1.000000000 0.731600254 0.000000000
[4957] 0.516418561 0.000000000 0.000000000 0.000000000 0.760348332 0.703588080
[4963] 1.000000000 1.000000000 1.000000000 1.000000000 0.294795228 1.000000000
[4969] 0.573395901 1.000000000 0.578094263 0.653547310 0.000000000 0.000000000
[4975] 0.731600254 0.000000000 1.000000000 0.000000000 0.827357970 0.061588249
[4981] 0.041838955 0.000000000 0.765670728 0.000000000 0.081685903 1.000000000
[4987] 0.053450811 0.000000000 0.000000000 0.035219942 1.000000000 1.000000000
[4993] 1.000000000 0.751150013 0.000000000 0.348119382 0.000000000 0.000000000
[4999] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.560803569
[5005] 0.000000000 0.525400180 0.059714838 1.000000000 0.067530796 0.754552467
[5011] 0.512592694 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[5017] 0.653547310 0.000000000 0.000000000 0.827357970 0.000000000 0.000000000
[5023] 0.000000000 0.000000000 0.231454098 0.000000000 1.000000000 1.000000000
[5029] 0.343505000 0.188172181 1.000000000 1.000000000 0.422515375 0.000000000
[5035] 0.000000000 0.000000000 0.003271218 1.000000000 1.000000000 0.084981926
[5041] 0.000000000 0.868474380 0.000000000 1.000000000 1.000000000 1.000000000
[5047] 0.402307080 0.000000000 1.000000000 0.344401822 0.148283871 0.000000000
[5053] 0.000000000 0.000000000 0.000000000 0.122879475 1.000000000 1.000000000
[5059] 1.000000000 1.000000000 1.000000000 0.162200031 0.000000000 0.000000000
[5065] 0.770154770 1.000000000 0.611247268 0.468878614 0.097597221 1.000000000
[5071] 1.000000000 1.000000000 1.000000000 1.000000000 0.128827635 0.820589821
[5077] 0.000000000 1.000000000 0.698019474 0.535440272 0.000000000 0.000000000
[5083] 0.000000000 0.074187011 1.000000000 1.000000000 1.000000000 1.000000000
[5089] 1.000000000 0.097926326 0.773889274 1.000000000 0.617672385 0.473807225
[5095] 0.000000000 0.805528952 1.000000000 1.000000000 1.000000000 1.000000000
[5101] 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5107] 0.520668140 0.000000000 0.000000000 0.000000000 0.132079882 0.221383961
[5113] 0.000000000 0.517795667 1.000000000 1.000000000 1.000000000 1.000000000
[5119] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5125] 1.000000000 1.000000000 1.000000000 0.317693027 0.528574587 0.083930752
[5131] 0.110894529 1.000000000 0.148732949 0.000000000 0.000000000 0.000000000
[5137] 1.000000000 1.000000000 0.000000000 0.721353238 0.000000000 1.000000000
[5143] 0.730735484 0.000000000 0.159219443 0.000000000 1.000000000 0.374610405
[5149] 0.000000000 0.000000000 0.422515375 0.000000000 1.000000000 0.463607472
[5155] 0.000000000 0.000000000 0.000000000 0.193465955 0.000000000 0.000000000
[5161] 0.000000000 0.629276054 0.000000000 1.000000000 1.000000000 1.000000000
[5167] 1.000000000 0.546466185 0.419186017 0.000000000 0.000000000 0.000000000
[5173] 0.000000000 0.751402618 0.000000000 0.000000000 0.468735084 1.000000000
[5179] 1.000000000 1.000000000 1.000000000 0.412797244 0.316650577 0.717706385
[5185] 0.000000000 0.168470964 1.000000000 0.000000000 0.000000000 1.000000000
[5191] 1.000000000 0.065412869 0.054268663 0.485201359 0.072886162 0.000000000
[5197] 0.000000000 0.701060567 0.000000000 0.000000000 1.000000000 0.000000000
[5203] 1.000000000 1.000000000 0.223278542 0.394437294 0.238863148 1.000000000
[5209] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5215] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5221] 0.137757147 0.000000000 0.826369314 0.000000000 0.370054697 0.000000000
[5227] 0.000000000 0.637311058 0.000000000 1.000000000 1.000000000 0.736390236
[5233] 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5239] 1.000000000 0.000000000 0.553399887 1.000000000 0.807438622 0.770909670
[5245] 0.000000000 0.000000000 0.000000000 0.000000000 0.272633254 0.000000000
[5251] 1.000000000 1.000000000 0.559906060 0.000000000 1.000000000 1.000000000
[5257] 0.664370207 0.000000000 0.000000000 0.000000000 0.000000000 0.282484939
[5263] 0.000000000 0.000000000 0.336541922 1.000000000 0.144028644 1.000000000
[5269] 1.000000000 0.737614959 1.000000000 1.000000000 1.000000000 0.000000000
[5275] 0.818382800 0.000000000 1.000000000 0.209830161 0.279037120 0.284364879
[5281] 1.000000000 0.121698622 1.000000000 1.000000000 0.708144911 1.000000000
[5287] 1.000000000 1.000000000 0.802354502 1.000000000 0.227838669 0.302985260
[5293] 0.000000000 0.000000000 0.000000000 0.000000000 0.101745232 1.000000000
[5299] 0.043543544 1.000000000 1.000000000 0.604999746 1.000000000 1.000000000
[5305] 1.000000000 0.746255458 1.000000000 0.128791878 0.171270490 0.006027348
[5311] 1.000000000 0.002579503 1.000000000 1.000000000 0.550937452 1.000000000
[5317] 1.000000000 1.000000000 0.716851821 1.000000000 0.131772596 0.175234320
[5323] 0.000000000 0.000000000 0.000000000 0.751402618 0.000000000 0.000000000
[5329] 0.000000000 0.000000000 0.000000000 0.803432267 0.000000000 1.000000000
[5335] 1.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.583824601
[5341] 1.000000000 0.000000000 0.572858443 0.000000000 0.000000000 0.000000000
[5347] 1.000000000 1.000000000 0.000000000 0.000000000 0.941911236 0.000000000
[5353] 1.000000000 1.000000000 0.123022749 1.000000000 1.000000000 1.000000000
[5359] 1.000000000 0.733206991 1.000000000 0.628156143 0.630057965 0.000000000
[5365] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[5371] 0.439230469 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5377] 0.000000000 1.000000000 0.000000000 1.000000000 0.000000000 0.809989988
[5383] 1.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[5389] 0.000000000 0.426637759 0.380750838 0.000000000 0.000000000 0.754552467
[5395] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[5401] 0.000000000 0.000000000 0.512592694 0.000000000 0.000000000 0.597276420
[5407] 0.000000000 0.000000000 0.470617764 0.000000000 0.000000000 0.000000000
[5413] 0.000000000 0.000000000 0.000000000 0.525400180 0.438226489 0.000000000
[5419] 0.597276420 1.000000000 1.000000000 0.000000000 0.752621632 0.000000000
[5425] 0.000000000 0.347774150 1.000000000 1.000000000 0.000000000 0.418374003
[5431] 0.581521595 1.000000000 1.000000000 0.166420467 1.000000000 0.258995260
[5437] 0.000000000 0.470617764 0.000000000 1.000000000 1.000000000 1.000000000
[5443] 1.000000000 1.000000000 0.461623684 0.000000000 0.000000000 0.683246294
[5449] 0.000000000 0.169662933 1.000000000 1.000000000 1.000000000 1.000000000
[5455] 1.000000000 0.435475267 0.575892857 0.143005051 1.000000000 1.000000000
[5461] 1.000000000 1.000000000 1.000000000 0.000000000 0.000000000 1.000000000
[5467] 0.675076584 0.000000000 0.904995576 0.281118565 1.000000000 0.122759562
[5473] 0.353684937 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5479] 0.268541885 1.000000000 0.137697847 0.366506657 1.000000000 1.000000000
[5485] 1.000000000 1.000000000 1.000000000 0.270562771 1.000000000 0.110221637
[5491] 0.342923478 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5497] 0.000000000 0.401137448 1.000000000 1.000000000 0.346983892 1.000000000
[5503] 1.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[5509] 0.000000000 0.000000000 0.630057965 0.000000000 1.000000000 1.000000000
[5515] 0.325937547 1.000000000 1.000000000 0.000000000 0.633820671 1.000000000
[5521] 0.000000000 0.317389222 1.000000000 0.093632645 1.000000000 0.188934900
[5527] 0.000000000 1.000000000 0.778076053 1.000000000 1.000000000 1.000000000
[5533] 1.000000000 0.174566417 0.134853271 0.000000000 1.000000000 0.998358255
[5539] 1.000000000 1.000000000 1.000000000 0.845960875 0.000000000 0.000000000
[5545] 0.000000000 0.998358255 0.000000000 0.000000000 0.000000000 0.000000000
[5551] 1.000000000 1.000000000 0.747659405 1.000000000 1.000000000 0.573389295
[5557] 1.000000000 1.000000000 0.279518126 1.000000000 1.000000000 0.064404081
[5563] 1.000000000 1.000000000 0.260527133 1.000000000 1.000000000 0.043756181
[5569] 0.176493702 1.000000000 0.356833518 0.000000000 0.000000000 0.000000000
[5575] 0.000000000 1.000000000 1.000000000 0.467365394 0.000000000 0.000000000
[5581] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[5587] 0.000000000 0.321495167 0.000000000 0.595894541 0.000000000 1.000000000
[5593] 0.940280897 0.851337546 0.513399233 1.000000000 1.000000000 0.000000000
[5599] 0.451721060 0.000000000 1.000000000 0.922694127 0.000000000 0.000000000
[5605] 0.000000000 0.000000000 0.851337546 0.000000000 0.000000000 0.321240416
[5611] 0.000000000 0.241996873 1.000000000 1.000000000 1.000000000 1.000000000
[5617] 0.661538008 1.000000000 1.000000000 1.000000000 0.377061536 0.000000000
[5623] 1.000000000 1.000000000 1.000000000 0.780501862 0.000000000 1.000000000
[5629] 1.000000000 1.000000000 0.525314772 0.000000000 0.232730901 1.000000000
[5635] 1.000000000 1.000000000 1.000000000 0.067895843 0.520863476 0.079314041
[5641] 1.000000000 1.000000000 1.000000000 1.000000000 0.023138714 0.472816714
[5647] 0.000000000 0.207787510 1.000000000 1.000000000 0.308340077 0.000000000
[5653] 0.093084091 0.000000000 0.033718316 1.000000000 1.000000000 0.166305971
[5659] 0.000000000 0.015105041 0.000000000 0.000000000 0.339679252 0.000000000
[5665] 0.000000000 1.000000000 0.528221644 0.000000000 0.000000000 0.000000000
[5671] 0.000000000 0.457562096 1.000000000 1.000000000 0.226722821 1.000000000
[5677] 1.000000000 1.000000000 1.000000000 1.000000000 0.167332863 1.000000000
[5683] 1.000000000 1.000000000 0.828160569 1.000000000 1.000000000 1.000000000
[5689] 0.100606460 0.061735535 0.000000000 0.000000000 0.265759185 0.000000000
[5695] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[5701] 0.551776326 0.000000000 0.000000000 1.000000000 0.645232403 1.000000000
[5707] 1.000000000 1.000000000 1.000000000 0.294558844 1.000000000 1.000000000
[5713] 0.194647202 0.000000000 0.633834208 1.000000000 1.000000000 0.000000000
[5719] 0.824492937 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[5725] 0.491349767 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5731] 0.000000000 1.000000000 1.000000000 0.729836893 0.376714230 1.000000000
[5737] 1.000000000 1.000000000 0.218032577 0.000000000 0.120888715 0.000000000
[5743] 0.929476857 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5749] 1.000000000 0.361705463 1.000000000 1.000000000 1.000000000 0.965854200
[5755] 1.000000000 1.000000000 1.000000000 0.412448011 0.133447069 0.000000000
[5761] 0.000000000 0.309945480 0.193324837 1.000000000 0.226068867 1.000000000
[5767] 1.000000000 1.000000000 1.000000000 1.000000000 0.000000000 1.000000000
[5773] 1.000000000 0.802919708 0.466770307 1.000000000 1.000000000 1.000000000
[5779] 0.577145056 0.000000000 0.149787977 0.000000000 1.000000000 0.233629630
[5785] 1.000000000 1.000000000 1.000000000 0.637981033 1.000000000 1.000000000
[5791] 1.000000000 0.662317473 1.000000000 1.000000000 0.184811907 0.000000000
[5797] 0.235375763 0.000000000 0.000000000 0.212539643 0.000000000 0.000000000
[5803] 0.000000000 0.000000000 0.685053866 1.000000000 1.000000000 1.000000000
[5809] 0.000000000 0.399094112 0.863968872 0.932278865 0.000000000 0.178372352
[5815] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5821] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5827] 1.000000000 0.079151322 0.659456959 0.204995940 0.159985090 0.473844564
[5833] 0.364011726 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5839] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5845] 1.000000000 1.000000000 0.161527327 0.529450886 0.312365668 0.243779704
[5851] 0.553950041 0.000000000 1.000000000 0.000000000 0.434926020 1.000000000
[5857] 0.513405273 1.000000000 1.000000000 1.000000000 1.000000000 0.244350675
[5863] 1.000000000 1.000000000 0.000000000 0.000000000 1.000000000 0.000000000
[5869] 0.000000000 0.078412857 0.682564103 0.000000000 0.000000000 0.915405777
[5875] 0.000000000 0.585299332 0.000000000 1.000000000 1.000000000 0.386771199
[5881] 1.000000000 1.000000000 0.000000000 0.000000000 1.000000000 0.838691641
[5887] 0.480864483 0.000000000 1.000000000 0.622740741 1.000000000 1.000000000
[5893] 1.000000000 1.000000000 0.344932988 1.000000000 1.000000000 1.000000000
[5899] 1.000000000 1.000000000 0.492616899 0.000000000 0.127259058 0.644528825
[5905] 0.503009971 0.801767452 0.000000000 0.000000000 0.629299310 1.000000000
[5911] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 0.931499334
[5917] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5923] 0.279246597 0.343665963 0.158929168 0.124033175 0.439475466 0.000000000
[5929] 0.595978364 0.000000000 1.000000000 1.000000000 1.000000000 1.000000000
[5935] 1.000000000 0.051411428 1.000000000 1.000000000 0.033973146 0.000000000
[5941] 0.377453447 1.000000000 0.264460690 0.000000000 1.000000000 0.562480288
[5947] 0.526099782 1.000000000 1.000000000 1.000000000 0.145847986 1.000000000
[5953] 1.000000000 1.000000000 0.123622217 0.000000000 0.000000000 0.295157523
[5959] 0.000000000 0.000000000 0.000000000 0.000000000 0.824492937 0.000000000
[5965] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[5971] 0.000000000 0.000000000 0.000000000 1.000000000 1.000000000 1.000000000
[5977] 0.412224603 0.042068103 0.334158192 0.000000000 0.000000000 0.485201359
[5983] 1.000000000 0.000000000 0.819273590 0.000000000 0.000000000 0.000000000
[5989] 0.000000000 0.000000000 0.000000000 1.000000000 0.000000000 0.000000000
[5995] 0.520863476 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[6001] 0.000000000 0.000000000 0.000000000 0.000000000 0.816443295 0.469361089
[6007] 0.000000000 1.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[6013] 1.000000000 0.119391881 0.490911509 0.000000000 1.000000000 0.000000000
[6019] 0.000000000 0.904995576 0.000000000 0.000000000 0.000000000 0.000000000
[6025] 0.000000000 0.000000000 1.000000000 0.173560602 0.000000000 0.058261113
[6031] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[6037] 0.000000000 0.838691641 0.000000000 0.000000000 0.000000000 0.000000000
[6043] 1.000000000 0.945814672 0.000000000 0.000000000 0.000000000 0.637442973
[6049] 1.000000000 1.000000000 1.000000000 0.245244443 0.000000000 0.558316917
[6055] 0.000000000 0.202513787 1.000000000 1.000000000 1.000000000 0.000000000
[6061] 0.051857570 0.064770789 1.000000000 0.000000000 0.000000000 0.000000000
[6067] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[6073] 0.000000000 0.000000000 0.801767452 0.000000000 0.000000000 0.000000000
[6079] 0.000000000 0.000000000 1.000000000 1.000000000 0.472864626 1.000000000
[6085] 1.000000000 0.421355522 1.000000000 1.000000000 0.736027740 0.000000000
[6091] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[6097] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.605563616
[6103] 1.000000000 1.000000000 1.000000000 0.502025242 0.322473605 0.000000000
[6109] 0.303049435 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000
[6115] 1.000000000 1.000000000 0.196943861 0.301349701 0.099243937 0.527089909
[6121] 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000
`summarise()` ungrouping output (override with `.groups` argument)
> 
> # for testing: turn all pass = 1 and DCI should = 1
> #sum_tab_2020<- sum_tab_2020 %>% mutate(CumulativePass=1)
> #sum_tab_2020 = as.data.table(sum_tab_2020)
> 
> ######## 4) DCI CALC ########
> DCId = 0.00
> DCIp = 0.00
> DCIs = 0.00
> 
> DCId <- calc_DCId_2020(sum_tab_2020,totalhabitat,"sink",bDistanceLim)
> if(bDCIp==TRUE){
+     DCIp <- calc_DCIp_2020(sum_tab_2020,totalhabitat,"unique",bDistanceLim)
+ 	# sectional can only be run if DCIp has been selected
+     if(bDCISectional==TRUE){
+         DCIs <- calc_DCIs_2020(sum_tab_2020,totalhabitat,"dt",bDistanceLim)
+     }
+ }
> 
> ######## 5) Write to Files ######
> 
> # following previous output format
> res<- data.frame(c(DCIp,DCId))
> names(res)<-"value"
> row.names(res)<-c("DCIp","DCId")
> write.table(res,file='out_dd.txt')
> 
> # transform data to match what FIPEX expects
> # DCIs 'FromEdgeName' 100-101 has first numbers as downstream node
> # to align in FIPEX it can be adjusted to e.g., 100_s
> # however, this results in more than one segment since, say, node
> # 100 can have multiple upstream edges and nodes.
> # To address this the _downstream_ segment DCI_s can be reported
> # for each node in the system. This change will have to be carefully reported
> # to the user!
> if(bDCISectional==TRUE & bDCIp==TRUE){
+     names(DCIs)[names(DCIs) == 'DCIs_i'] <- 'DCI_as'
+     names(DCIs)[names(DCIs) == 'FromEdgeName'] <- 'section'
+     
+     #DCIs$sections <- paste(sub("\\-.*", "", DCIs$section),"_s",sep="")
+     # there was a problem encountered with the above because it resulted
+     # in more than one upstream segment associated with each node. I 
+     # reversed this but now need to be careful that the segmental DCI
+     # is now reported as associated with the immediate _downstream_
+     # segement from each node!
+     DCIs$sections <- paste(sub(".*\\-", "", DCIs$section),"_s",sep="")
+ 
+     DCIs$sections[DCIs$sections == "sink_s"] <- "sink"
+     DCIs <- DCIs %>% select(sections,DCI_as)
+     res<-data.frame(DCIs)
+     write.table(x=res,
+                 file="DCI_all_sections_dd.csv",
+                 sep=",",
+                 row.names=F)
+ }
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
 916.20    5.04  938.54 
